/**
* @class SelectScatterChart
* @author InfoSoft Global (P) Ltd. www.InfoSoftGlobal.com
* @version 3.0
*
* Copyright (C) InfoSoft Global Pvt. Ltd. 2005-2006
*
* SelectScatterChart chart extends the XYPlotChart class to render a
* 2D Scatter chart with selection option.
*/
//Import Chart class
import com.fusioncharts.core.Chart;
//Parent XYPlotChart Class
import com.fusioncharts.core.XYPlotChart;
//Error class
import com.fusioncharts.helper.FCError;
//Import Logger Class
import com.fusioncharts.helper.Logger;
//Style Object
import com.fusioncharts.core.StyleObject;
//Delegate
import mx.utils.Delegate;
//Legend Class
import com.fusioncharts.helper.Legend;
//Selection rectangle
import com.fusioncharts.helper.SelectRect;
//Button
import com.fusioncharts.helper.FCButton;
import flash.external.ExternalInterface;
//Extensions
import com.fusioncharts.extensions.StringExt;
import com.fusioncharts.extensions.DrawingExt;
class com.fusioncharts.core.charts.SelectScatterChart extends XYPlotChart {
	//Version number (if different from super Chart class)
	//private var _version:String = "3.0.0";
	//Instance variables
	//List of chart objects
	private var _arrObjects:Array;
	private var xmlData:XML;
	private var selectRects:Array;	
	//Listeners
	private var rectListener:Object;
	private var RHListener:Object;
	/**
	* Constructor function. We invoke the super class'
	* constructor and then set the objects for this chart.
	*/
	function SelectScatterChart(targetMC:MovieClip, depth:Number, width:Number, height:Number, x:Number, y:Number, debugMode:Boolean, lang:String, scaleMode:String, registerWithJS:Boolean, DOMId:String) {
		//Invoke the super class constructor
		super (targetMC, depth, width, height, x, y, debugMode, lang, scaleMode, registerWithJS, DOMId);
		//Log additional information to debugger
		//We log version from this class, so that if this class version
		//is different, we can log it
		this.log("Version", _version, Logger.LEVEL.INFO);
		this.log("Chart Type", "2D Scatter Chart", Logger.LEVEL.INFO);
		//List Chart Objects and set them
		_arrObjects = new Array("BACKGROUND", "CANVAS", "CAPTION", "SUBCAPTION", "YAXISNAME", "XAXISNAME", "DIVLINES", "VLINES", "YAXISVALUES", "HGRID", "DATALABELS", "DATAVALUES", "TRENDLINES", "VTRENDLINES", "TRENDVALUES", "DATAPLOT", "ANCHORS", "TOOLTIP", "LEGEND");
		super.setChartObjects(_arrObjects);
		//Configuration whether we've to draw any line
		this.config.drawLine = false;
		//Array which holds the selected id's
		this.config.strReturn = new Array();
		//Iterator to hold the number of rectangles drawn
		this.config.depthIterator = 0;
		//Create select rectangle array
		this.selectRects = new Array();
		//Initialize the listener
		this.rectListener = new Object();
		this.RHListener = new Object();
		//Listeners Stack
		this.config.stkListener = new Array();
		this.config.stkListenerLength = 0;
		if (targetMC._registerWithJS==true){
			//Register the returnXML method of chart 
			ExternalInterface.addCallback("getXMLData", this, generateXML);
			ExternalInterface.addCallback("getData", this, generateArrData);
		}
	}
	/**
	* render method is the single call method that does the rendering of chart:
	* - Parsing XML
	* - Calculating values and co-ordinates
	* - Visual layout and rendering
	* - Event handling
	*/
	public function render():Void {
		//Parse the XML Data document
		this.parseXML();
		//Now, if the number of data elements is 0, we show pertinent
		//error.
		if (this.numDS*this.num == 0) {
			tfAppMsg = this.renderAppMessage(_global.getAppMessage("NODATA", this.lang));
			//Add a message to log.
			this.log("No Data to Display", "No data was found in the XML data document provided. Possible cases can be: <LI>There isn't any data generated by your system. If your system generates data based on parameters passed to it using dataURL, please make sure dataURL is URL Encoded.</LI><LI>You might be using a Single Series Chart .swf file instead of Multi-series .swf file and providing multi-series data or vice-versa.</LI>", Logger.LEVEL.ERROR);
			//Expose rendered method
			this.exposeChartRendered();
		} else {
			//Detect number scales
			this.detectNumberScales();
			//Calculate the axis limits
			this.calculateAxisLimits();
			//Calculate exact number of div lines
			this.calcDivs();
			//Set Style defaults
			this.setStyleDefaults();
			//Validate trend lines
			this.validateTrendLines();
			//Allot the depths for various charts objects now
			this.allotDepths();
			//Calculate Canvas Co-ordinates
			this.calcCanvasCoords();
			//Calculate Points
			this.calculatePoints();
			//Calculate trend line positions
			this.calcTrendLinePos();
			//Feed macro values
			super.feedMacros();
			//Remove application message
			this.removeAppMessage(this.tfAppMsg);
			//Set tool tip parameter
			this.setToolTipParam();
			//-----Start Visual Rendering Now------//
			//Draw background
			this.drawBackground();
			//Set click handler
			this.drawClickURLHandler();
			//Load background SWF
			this.loadBgSWF();
			//Update timer
			this.timeElapsed = (this.params.animation) ? this.styleM.getMaxAnimationTime(this.objects.BACKGROUND) : 0;
			//Draw canvas
			this.config.intervals.canvas = setInterval(Delegate.create(this, drawCanvas), this.timeElapsed);
			//Draw headers
			this.config.intervals.headers = setInterval(Delegate.create(this, drawHeaders), this.timeElapsed);
			//Update timer
			this.timeElapsed += (this.params.animation) ? this.styleM.getMaxAnimationTime(this.objects.CANVAS, this.objects.CAPTION, this.objects.SUBCAPTION, this.objects.YAXISNAME, this.objects.XAXISNAME) : 0;
			//Draw div lines
			this.config.intervals.divLines = setInterval(Delegate.create(this, drawDivLines), this.timeElapsed);
			//Update timer
			this.timeElapsed += (this.params.animation) ? this.styleM.getMaxAnimationTime(this.objects.DIVLINES, this.objects.YAXISVALUES) : 0;
			//Horizontal grid
			this.config.intervals.hGrid = setInterval(Delegate.create(this, drawHGrid), this.timeElapsed);
			//Update timer
			this.timeElapsed += (this.params.animation && (this.params.showAlternateHGridColor) ? this.styleM.getMaxAnimationTime(this.objects.HGRID) : 0);
			//Vertical lines
			this.config.intervals.vLine = setInterval(Delegate.create(this, drawVLines), this.timeElapsed);
			//Draw trend lines
			this.config.intervals.vTrend = setInterval(Delegate.create(this, drawVTrendLines), this.timeElapsed);
			this.config.intervals.trend = setInterval(Delegate.create(this, drawTrendLines), this.timeElapsed);
			//Update timer
			this.timeElapsed += (this.params.animation) ? this.styleM.getMaxAnimationTime(this.objects.VLINES, this.objects.TRENDLINES, this.objects.VTRENDLINES, this.objects.TRENDVALUES) : 0;
			//Draw labels
			this.config.intervals.labels = setInterval(Delegate.create(this, drawLabels), this.timeElapsed);
			//Legend
			this.config.intervals.legend = setInterval(Delegate.create(this, drawLegend), this.timeElapsed);
			//Update timer
			this.timeElapsed += (this.params.animation && this.styleM.getMaxAnimationTime(this.objects.DATALABELS, this.objects.LEGEND));
			//Draw the line plot
			if (this.config.drawLine) {
				//Draw line chart
				this.config.intervals.plot = setInterval(Delegate.create(this, drawLineChart), this.timeElapsed);
				//Update timer
				this.timeElapsed += (this.params.animation) ? this.styleM.getMaxAnimationTime(this.objects.DATAPLOT) : 0;
			}
			//Anchors 
			this.config.intervals.anchors = setInterval(Delegate.create(this, drawAnchors), this.timeElapsed);
			//Data Values
			this.config.intervals.dataValues = setInterval(Delegate.create(this, drawValues), this.timeElapsed);
			if(this.params.showFormBtn) {
				//Draw and show the form button
				this.config.intervals.formBtn = setInterval(Delegate.create(this, drawFormBtn), this.timeElapsed);
			}
			//Update timer
			this.timeElapsed += (this.params.animation) ? this.styleM.getMaxAnimationTime(this.objects.ANCHORS, this.objects.DATAVALUES) : 0;
			//Dispatch event that the chart has loaded.
			this.config.intervals.renderedEvent = setInterval(Delegate.create(this, exposeChartRendered) , this.timeElapsed);
			//Render context menu
			//We do not put context menu interval as we need the menu to appear
			//right from start of the play.			
			this.setContextMenu();
			//Finally, draw the hidden canvas MC
			this.drawHandlerMC();
		}
	}
	/**
	* returnDataAsObject method creates an object out of the parameters
	* passed to this method. The idea is that we store each data point
	* as an object with multiple (flexible) properties. So, we do not
	* use a predefined class structure. Instead we use a generic object.
	*	@param	id			id of the data item.
	*	@param	x			x-Value for the data.
	*	@param	y			y-Value for the data.
	*	@param	label		Label for the data
	*	@param	toolText	Tool tip text (if specified).
	*	@param	link		Link (if any) for the data.
	*	@param	showValue	Flag to show/hide value for this data.
	*	@returns			An object encapsulating all these properies.
	*/
	private function returnDataAsObject(id:Number, xv:Number, yv:Number, toolText:String, link:String, showValue:Number):Object {
		//Create a container
		var dataObj:Object = new Object();
		//Store the id
		dataObj.id = id;
		//Store the values
		dataObj.xv = xv;
		dataObj.yv = yv;
		dataObj.toolText = toolText;
		dataObj.link = link;
		dataObj.showValue = (showValue == 1) ? true : false;
		//If the given number is not a valid number or it's missing
		//set appropriate flags for this data point
		dataObj.isDefined = (isNaN(xv) || isNaN(yv)) ? false : true;
		//Other parameters
		//X & Y Position of data point
		dataObj.x = 0;
		dataObj.y = 0;
		dataObj.isSelected = false;
		//X & Y Position of value tb
		dataObj.valTBX = 0;
		dataObj.valTBY = 0;
		//Return the container
		return dataObj;
	}
	/**
	 * returnDataAsCat method returns data of a <category> element as
	 * an object
	 *	@param	label		Label of the category.
	 *	@param	xv			X-value of the category
	 *	@param	showLabel	Whether to show the label of this category.
	 *	@param	toolText	Tool-text for the category
	 *	@param	showLine	Whether to show vertical line
	 *	@param	lineDashed	Whether vertical line is dashed
	 *	@returns			A container object with the given properties
	*/
	private function returnDataAsCat(label:String, xv:Number, showLabel:Number, toolText:String, showLine:Boolean, lineDashed:Boolean):Object {
		//Create container object
		var catObj:Object = new Object();
		catObj.label = label;
		catObj.xv = xv;
		catObj.showLabel = ((showLabel == 1) && (label != undefined) && (label != null) && (label != "")) ? true : false;
		catObj.toolText = toolText;
		catObj.showLine = showLine;
		catObj.lineDashed = lineDashed;
		//X and Y Position
		catObj.x = 0;
		catObj.y = 0;
		//Valid
		catObj.isValid = true;
		//Return container
		return catObj;
	}
	/**
	* parseXML method parses the XML data, sets defaults and validates
	* the attributes before storing them to data storage objects.
	*/
	private function parseXML():Void {
		//Get the element nodes
		var arrDocElement:Array = this.xmlData.childNodes;
		//Loop variable
		var i:Number;
		var j:Number;
		var k:Number;
		//Look for <graph> element
		for (i=0; i<arrDocElement.length; i++) {
			//If it's a <graph> element, proceed.
			//Do case in-sensitive mathcing by changing to upper case
			if (arrDocElement[i].nodeName.toUpperCase() == "GRAPH" || arrDocElement[i].nodeName.toUpperCase() == "CHART") {
				//Extract attributes of <graph> element
				this.parseAttributes(arrDocElement[i]);
				//Now, get the child nodes - first level nodes
				//Level 1 nodes can be - CATEGORIES, DATASET, TRENDLINES, STYLES etc.
				var arrLevel1Nodes:Array = arrDocElement[i].childNodes;
				var setNode:XMLNode;
				//Iterate through all level 1 nodes.
				for (j=0; j<arrLevel1Nodes.length; j++) {
					if (arrLevel1Nodes[j].nodeName.toUpperCase() == "CATEGORIES") {
						//Categories Node. 
						var categoriesNode:XMLNode = arrLevel1Nodes[j];
						//Convert attributes to array
						var categoriesAtt:Array = this.getAttributesArray(categoriesNode);
						//Extract attributes of this node.
						this.params.catFont = getFV(categoriesAtt["font"], this.params.outCnvBaseFont);
						this.params.catFontSize = getFN(categoriesAtt["fontsize"], this.params.outCnvBaseFontSize);
						this.params.catFontColor = formatColor(getFV(categoriesAtt["fontcolor"], this.params.outCnvBaseFontColor));
						//Category vertical lines
						this.params.catVerticalLineColor = formatColor(getFV(categoriesAtt["verticallinecolor"], this.defColors.get2DDivLineColor(this.params.palette)));
						this.params.catVerticalLineThickness = getFN(categoriesAtt["verticallinethickness"], 1);
						this.params.catVerticalLineAlpha = getFN(categoriesAtt["verticallinealpha"], this.defColors.get2DDivLineAlpha(this.params.palette));
						this.params.catVerticalLineDashed = toBoolean(getFN(categoriesAtt["verticallinedashed"], 0));
						this.params.catVerticalLineDashLen = getFN(categoriesAtt["verticallinedashlen"], 4);
						this.params.catVerticalLineDashGap = getFN(categoriesAtt["verticallinedashgap"], 2);
						//Get reference to child node.
						var arrLevel2Nodes:Array = arrLevel1Nodes[j].childNodes;
						//Iterate through all child-nodes of CATEGORIES element
						//and search for CATEGORY or VLINE node
						for (k=0; k<arrLevel2Nodes.length; k++) {
							if (arrLevel2Nodes[k].nodeName.toUpperCase() == "CATEGORY") {
								//Category Node. 
								//Update counter
								this.numCat++;
								//Extract attributes
								var categoryNode:XMLNode = arrLevel2Nodes[k];
								var categoryAtt:Array = this.getAttributesArray(categoryNode);
								//Category label.
								var catLabel:String = getFV(categoryAtt["label"], categoryAtt["name"], "");
								//X-value
								var catX:Number = this.getSetValue(categoryAtt["x"]);								
								var catShowLabel:Number = getFN(categoryAtt["showlabel"], categoryAtt["showname"], this.params.showLabels);
								var catToolText:String = getFV(categoryAtt["tooltext"], categoryAtt["hovertext"], catLabel);
								var catShowLine:Boolean = toBoolean(getFN(categoryAtt["showverticalline"], categoryAtt["sl"], 0));
								var catLineDashed:Boolean = toBoolean(getFN(categoryAtt["linedashed"], this.params.catVerticalLineDashed));
								//If x value for category has has not been provided, we won't add it
								if (isNaN(catX)) {
									this.numCat--;
								} else {
									//Store it in data container.
									this.categories[this.numCat] = this.returnDataAsCat(catLabel, catX, catShowLabel, catToolText, catShowLine, catLineDashed);
								}
							}
						}
					} else if (arrLevel1Nodes[j].nodeName.toUpperCase() == "DATASET") {
						//Increment
						this.numDS++;
						//Dataset node.
						var dataSetNode:XMLNode = arrLevel1Nodes[j];
						//Get attributes array
						var dsAtts:Array = this.getAttributesArray(dataSetNode);
						//Create storage object in dataset array
						this.dataset[this.numDS] = new Object();
						//Store attributes
						this.dataset[this.numDS].id = getFV(dsAtts["id"], "");
						this.dataset[this.numDS].seriesName = getFV(dsAtts["seriesname"], "");
						this.dataset[this.numDS].color = formatColor(getFV(dsAtts["color"], this.defColors.getColor()));
						this.dataset[this.numDS].alpha = getFN(dsAtts["alpha"], 100);
						this.dataset[this.numDS].showValues = toBoolean(getFN(dsAtts["showvalues"], dsAtts["showvalue"], this.params.showValues));
						this.dataset[this.numDS].includeInLegend = toBoolean(getFN(dsAtts["includeinlegend"], 1));
						//Data set anchors						
						this.dataset[this.numDS].drawAnchors = toBoolean(getFN(dsAtts["drawanchors"], dsAtts["showanchors"], this.params.drawAnchors));
						this.dataset[this.numDS].anchorSides = getFN(dsAtts["anchorsides"], this.params.anchorSides, 2+this.numDS);
						this.dataset[this.numDS].anchorRadius = getFN(dsAtts["anchorradius"], this.params.anchorRadius);
						this.dataset[this.numDS].anchorBorderColor = formatColor(getFV(dsAtts["anchorbordercolor"], this.dataset[this.numDS].color));
						this.dataset[this.numDS].anchorBorderThickness = getFN(dsAtts["anchorborderthickness"], this.params.anchorBorderThickness);
						this.dataset[this.numDS].anchorBgColor = formatColor(getFV(dsAtts["anchorbgcolor"], this.params.anchorBgColor));
						this.dataset[this.numDS].anchorAlpha = getFN(dsAtts["anchoralpha"], this.params.anchorAlpha);
						this.dataset[this.numDS].anchorBgAlpha = getFN(dsAtts["anchorbgalpha"], this.params.anchorBgAlpha);
						//Data set line properties
						this.dataset[this.numDS].drawLine = toBoolean(getFN(dsAtts["drawline"], (dsAtts["linealpha"]>0) ? 1 : 0));
						//Update global config - whether we've to draw any lines at all.
						this.config.drawLine = this.config.drawLine || this.dataset[this.numDS].drawLine;
						//Extract Properties
						this.dataset[this.numDS].lineColor = formatColor(getFV(dsAtts["linecolor"], this.dataset[this.numDS].color));
						this.dataset[this.numDS].lineThickness = getFN(dsAtts["linethickness"], this.params.lineThickness);
						this.dataset[this.numDS].lineAlpha = getFN(dsAtts["linealpha"], this.params.lineAlpha);
						//Line Dash Properties
						this.dataset[this.numDS].lineDashed = toBoolean(getFN(dsAtts["linedashed"], this.params.lineDashed));
						this.dataset[this.numDS].lineDashLen = getFN(dsAtts["linedashlen"], this.params.lineDashLen);
						this.dataset[this.numDS].lineDashGap = getFN(dsAtts["linedashgap"], this.params.lineDashGap);
						//Create data array under it.
						this.dataset[this.numDS].data = new Array();
						//Get reference to child node.
						var arrLevel2Nodes:Array = arrLevel1Nodes[j].childNodes;
						//Iterate through all child-nodes of DATASET element
						//and search for SET node
						//Counter
						var setCount:Number = 0;
						for (k=0; k<arrLevel2Nodes.length; k++) {
							if (arrLevel2Nodes[k].nodeName.toUpperCase() == "SET") {
								//Set Node. So extract the data.
								//Update counter
								setCount++;
								//Get reference to node.
								setNode = arrLevel2Nodes[k];
								//Get attributes
								var atts:Array;
								atts = this.getAttributesArray(setNode);
								//ID
								var setId:Number = getFV(atts["id"], "");
								//Now, get values.
								var setXV:Number = getFN(this.getSetValue(atts["x"]),setCount);
								var setYV:Number = this.getSetValue(atts["y"]);
								//We do NOT unescape the link, as this will be done
								//in invokeLink method for the links that user clicks.
								var setLink:String = getFV(atts["link"], "");
								var setToolText:String = getFV(atts["tooltext"], atts["hovertext"], atts["name"]);
								var setShowValue:Number = getFN(atts["showvalue"], this.dataset[this.numDS].showValues);
								//Store all these attributes as object.						
								this.dataset[this.numDS].data[setCount] = this.returnDataAsObject(setId, setXV, setYV, setToolText, setLink, setShowValue);
							}
						}
						//Update global counter
						this.dataset[this.numDS].num = setCount;
						if (setCount>this.num) {
							this.num = setCount;
						}
					} else if (arrLevel1Nodes[j].nodeName.toUpperCase() == "STYLES") {
						//Styles Node - extract child nodes
						var arrStyleNodes:Array = arrLevel1Nodes[j].childNodes;
						//Parse the style nodes to extract style information
						super.parseStyleXML(arrStyleNodes);
					} else if (arrLevel1Nodes[j].nodeName.toUpperCase() == "HTRENDLINES" || arrLevel1Nodes[j].nodeName.toUpperCase() == "TRENDLINES") {
						//Trend lines node
						var arrTrendNodes:Array = arrLevel1Nodes[j].childNodes;
						//Parse the trend line nodes
						super.parseHTrendLineXML(arrTrendNodes);
					} else if (arrLevel1Nodes[j].nodeName.toUpperCase() == "VTRENDLINES") {
						//Vertical Trend lines node
						var arrTrendNodes:Array = arrLevel1Nodes[j].childNodes;
						//Parse the trend line nodes
						super.parseVTrendLineXML(arrTrendNodes);
					}
				}
			}
		}
		//Delete all temporary objects used for parsing XML Data document
		delete setNode;
		delete arrDocElement;
		delete arrLevel1Nodes;
		delete arrLevel2Nodes;
	}
	/**
	* parseAttributes method parses the attributes and stores them in
	* chart storage objects.
	* Starting ActionScript 2, the parsing of XML attributes have also
	* become case-sensitive. However, prior versions of FusionCharts
	* supported case-insensitive attributes. So we need to parse all
	* attributes as case-insensitive to maintain backward compatibility.
	* To do so, we first extract all attributes from XML, convert it into
	* lower case and then store it in an array. Later, we extract value from
	* this array.
	* @param	graphElement	XML Node containing the <graph> element
	*							and it's attributes
	*/
	private function parseAttributes(graphElement:XMLNode):Void {
		//Array to store the attributes
		var atts:Array = this.getAttributesArray(graphElement);
		//NOW IT'S VERY NECCESARY THAT WHEN WE REFERENCE THIS ARRAY
		//TO GET AN ATTRIBUTE VALUE, WE SHOULD PROVIDE THE ATTRIBUTE
		//NAME IN LOWER CASE. ELSE, UNDEFINED VALUE WOULD SHOW UP.
		//Extract attributes pertinent to this chart
		//Which palette to use?
		this.params.palette = getFN(atts["palette"],1)
		//Whether to show about FusionCharts Menu Item - by default set to on
		this.params.showFCMenuItem = toBoolean(getFN (atts ["showfcmenuitem"] , 1));
		// ---------- PADDING AND SPACING RELATED ATTRIBUTES ----------- //
		//captionPadding = Space between caption/subcaption and canvas start Y
		this.params.captionPadding = getFN(atts["captionpadding"], 10);
		//Padding for x-axis name - to the right
		this.params.xAxisNamePadding = getFN(atts["xaxisnamepadding"], 5);
		//Padding for y-axis name - from top
		this.params.yAxisNamePadding = getFN(atts["yaxisnamepadding"], 5);
		//Y-Axis Values padding - Horizontal space between the axis edge and
		//y-axis values or trend line values (on left/right side).
		this.params.yAxisValuesPadding = getFN(atts["yaxisvaluespadding"], 2);
		//Label padding - Vertical space between the labels and canvas end position
		this.params.labelPadding = getFN(atts["labelpadding"], atts["labelspadding"], 3);
		//Value padding - vertical space between the anchors and start of value textboxes
		this.params.valuePadding = getFN(atts["valuepadding"], 2);
		//Padding of legend from right/bottom side of canvas
		this.params.legendPadding = getFN(atts["legendpadding"], 6);
		//Chart Margins - Empty space at the 4 sides
		this.params.chartLeftMargin = getFN(atts["chartleftmargin"], 15);
		this.params.chartRightMargin = getFN(atts["chartrightmargin"], 15);
		this.params.chartTopMargin = getFN(atts["charttopmargin"], 15);
		this.params.chartBottomMargin = getFN(atts["chartbottommargin"], 15);
		// -------------------------- HEADERS ------------------------- //
		//Chart Caption and sub Caption
		this.params.caption = getFV(atts["caption"], "");
		this.params.subCaption = getFV(atts["subcaption"], "");
		//X and Y Axis Name
		this.params.xAxisName = getFV(atts["xaxisname"], "");
		this.params.yAxisName = getFV(atts["yaxisname"], "");
		//Adaptive yMin - if set to true, the y min will be based on the values 
		//provided. It won't be set to 0 in case of all positive values
		this.params.setAdaptiveYMin = toBoolean(getFN(atts["setadaptiveymin"], 0));
		// --------------------- CONFIGURATION ------------------------- //
		//The upper and lower limits of y and x axis
		this.params.yAxisMinValue = atts["yaxisminvalue"];
		this.params.yAxisMaxValue = atts["yaxismaxvalue"];
		//X-axis
		this.params.xAxisMinValue = atts["xaxisminvalue"];
		this.params.xAxisMaxValue = atts["xaxismaxvalue"];
		//Whether to set animation for entire chart.
		this.params.animation = toBoolean(getFN(atts["animation"], 1));
		//Whether to set the default chart animation
		this.params.defaultAnimation = toBoolean(getFN(atts["defaultanimation"], 1));
		//Configuration to set whether to show the labels   
		this.params.showLabels = toBoolean(getFN(atts["showlabels"], atts["shownames"], 1));
		//Label Display Mode - WRAP, STAGGER, ROTATE or NONE
		this.params.labelDisplay = getFV(atts["labeldisplay"], "WRAP");
		//Remove spaces and capitalize
		this.params.labelDisplay = StringExt.removeSpaces(this.params.labelDisplay);
		this.params.labelDisplay = this.params.labelDisplay.toUpperCase();
		//Option to show vertical x-axis labels
		this.params.rotateLabels = getFV(atts["rotatelabels"], atts["rotatenames"]);
		//Whether to slant label (if rotated)
		this.params.slantLabels = toBoolean(getFN(atts["slantlabels"], atts["slantlabel"], 0));
		//Angle of rotation based on slanting
		this.config.labelAngle = (this.params.slantLabels == true) ? 315 : 270;
		//If rotateLabels has been explicitly specified, we assign ROTATE value to this.params.labelDisplay
		this.params.labelDisplay = (this.params.rotateLabels == "1") ? "ROTATE" : this.params.labelDisplay;
		//Step value for labels - i.e., show all labels or skip every x label
		this.params.labelStep = int(getFN(atts["labelstep"], 1));
		//Cannot be less than 1
		this.params.labelStep = (this.params.labelStep<1) ? 1 : this.params.labelStep;
		//Number of stagger lines
		this.params.staggerLines = int(getFN(atts["staggerlines"], 2));
		//Cannot be less than 2
		this.params.staggerLines = (this.params.staggerLines<2) ? 2 : this.params.staggerLines;
		//Configuration whether to show data values
		this.params.showValues = toBoolean(getFN(atts["showvalues"], 0));
		//Whether to rotate values
		this.params.rotateValues = toBoolean(getFN(atts["rotatevalues"], 0));
		//Option to show/hide y-axis values
		this.params.showYAxisValues = getFN(atts["showyaxisvalues"], atts["showyaxisvalue"], 1);
		this.params.showLimits = toBoolean(getFN(atts["showlimits"], this.params.showYAxisValues));
		this.params.showDivLineValues = toBoolean(getFN(atts["showdivlinevalue"], atts["showdivlinevalues"], this.params.showYAxisValues));
		//Y-axis value step- i.e., show all y-axis or skip every x(th) value
		this.params.yAxisValuesStep = int(getFN(atts["yaxisvaluesstep"], atts["yaxisvaluestep"], 1));
		//Cannot be less than 1
		this.params.yAxisValuesStep = (this.params.yAxisValuesStep<1) ? 1 : this.params.yAxisValuesStep;
		//Whether to automatically adjust div lines
		this.params.adjustDiv = toBoolean(getFN(atts["adjustdiv"], 1));
		//Whether to rotate y-axis name
		this.params.rotateYAxisName = toBoolean(getFN(atts["rotateyaxisname"], 1));
		//Max width to be alloted to y-axis name - No defaults, as it's calculated later.
		this.params.yAxisNameWidth = atts["yaxisnamewidth"];
		//Click URL
		this.params.clickURL = getFV(atts["clickurl"], "");
		//Form Actions
		this.params.submitDataAsXML = toBoolean(getFN(atts["submitdataasxml"], 1));
		this.params.showFormBtn = toBoolean(getFN(atts["showformbtn"], 1));
		this.params.formBtnWidth = getFN(atts["formbtnwidth"], 80);
		this.params.formBtnTitle = getFV(atts["formbtntitle"], "Submit");
		this.params.formBtnBorderColor = getFV(atts["formbtnbordercolor"], "CBCBCB");
		this.params.formBtnBgColor = getFV(atts["formbtnbgcolor"], "FFFFFF");
		this.params.formAction = getFV(atts["formaction"], "");
		this.params.formTarget = getFV(atts["formtarget"], "_self");
		this.params.formMethod = getFV(atts["formmethod"], "POST");
		this.params.formBtnBgColor = getFV(atts["formbtnbgcolor"], "FFFFFF");
		this.params.btnTextColor = getFV(atts["btntextcolor"], "000000");
		this.params.btnPadding  = getFN(atts["btnpadding"], 5);
		this.params.selectBorderColor = getFV(atts["selectbordercolor"], this.defColors.get2DCanvasBorderColor(this.params.palette));
		this.params.selectBorderAlpha = getFN(atts["selectborderalpha"], this.defColors.get2DCanvasBorderAlpha(this.params.palette));
		this.params.selectFillColor = getFV(atts["selectfillcolor"], this.defColors.get2DAltHGridColor(this.params.palette));
		this.params.selectFillAlpha = getFN(atts["selectfillalpha"],  this.defColors.get2DAltHGridAlpha(this.params.palette));
		// ------------------------- COSMETICS -----------------------------//
		//Background properties - Gradient
		this.params.bgColor = getFV(atts["bgcolor"], this.defColors.get2DBgColor(this.params.palette));
		this.params.bgAlpha = getFV(atts["bgalpha"], this.defColors.get2DBgAlpha(this.params.palette));
		this.params.bgRatio = getFV(atts["bgratio"], this.defColors.get2DBgRatio(this.params.palette));
		this.params.bgAngle = getFV(atts["bgangle"], this.defColors.get2DBgAngle(this.params.palette));
		//Border Properties of chart
		this.params.showBorder = toBoolean(getFN(atts["showborder"], 1));
		this.params.borderColor = formatColor(getFV(atts["bordercolor"], this.defColors.get2DBorderColor(this.params.palette)));
		this.params.borderThickness = getFN(atts["borderthickness"], 1);
		this.params.borderAlpha = getFN(atts["borderalpha"], this.defColors.get2DBorderAlpha(this.params.palette));
		//Background swf
		this.params.bgSWF = getFV(atts["bgswf"], "");
		this.params.bgSWFAlpha = getFN(atts["bgswfalpha"], 100);
		//Canvas background properties - Gradient
		this.params.canvasBgColor = getFV(atts["canvasbgcolor"], this.defColors.get2DCanvasBgColor(this.params.palette));
		this.params.canvasBgAlpha = getFV(atts["canvasbgalpha"], this.defColors.get2DCanvasBgAlpha(this.params.palette));
		this.params.canvasBgRatio = getFV(atts["canvasbgratio"], this.defColors.get2DCanvasBgRatio(this.params.palette));
		this.params.canvasBgAngle = getFV(atts["canvasbgangle"], this.defColors.get2DCanvasBgAngle(this.params.palette));
		//Canvas Border properties
		this.params.canvasBorderColor = formatColor(getFV(atts["canvasbordercolor"], this.defColors.get2DCanvasBorderColor(this.params.palette)));
		this.params.canvasBorderThickness = getFN(atts["canvasborderthickness"], 2);
		this.params.canvasBorderAlpha = getFN(atts["canvasborderalpha"], this.defColors.get2DCanvasBorderAlpha(this.params.palette));
		//Legend properties		
		this.params.showLegend = toBoolean(getFN(atts["showlegend"], 1));
		//Alignment position
		this.params.legendPosition = getFV(atts["legendposition"], "BOTTOM");
		//Legend position can be either RIGHT or BOTTOM -Check for it
		this.params.legendPosition = (this.params.legendPosition.toUpperCase() == "RIGHT") ? "RIGHT" : "BOTTOM";
		this.params.legendCaption = getFV(atts ["legendcaption"] , "");
		this.params.legendMarkerCircle = toBoolean(getFN(atts ["legendmarkercircle"] , 0));
		this.params.legendBorderColor = formatColor(getFV(atts["legendbordercolor"], this.defColors.get2DLegendBorderColor(this.params.palette)));
		this.params.legendBorderThickness = getFN(atts["legendborderthickness"], 1);
		this.params.legendBorderAlpha = getFN(atts["legendborderalpha"], 100);
		this.params.legendBgColor = getFV(atts["legendbgcolor"], this.defColors.get2DLegendBgColor(this.params.palette));
		this.params.legendBgAlpha = getFN(atts["legendbgalpha"], 100);
		this.params.legendShadow = toBoolean(getFN(atts["legendshadow"], 1));
		this.params.legendAllowDrag = toBoolean(getFN(atts["legendallowdrag"], 0));
		this.params.legendScrollBgColor = formatColor(getFV(atts["legendscrollbgcolor"], "CCCCCC"));
		this.params.legendScrollBarColor = formatColor(getFV(atts["legendscrollbarcolor"], this.params.legendBorderColor));
		this.params.legendScrollBtnColor = formatColor(getFV(atts["legendscrollbtncolor"], this.params.legendBorderColor));
		//Horizontal grid division Lines - Number, color, thickness & alpha
		//Necessarily need a default value for numDivLines.
		this.params.numDivLines = getFN(atts["numdivlines"], 4);
		this.params.divLineColor = formatColor(getFV(atts["divlinecolor"], this.defColors.get2DDivLineColor(this.params.palette)));
		this.params.divLineThickness = getFN(atts["divlinethickness"], 1);
		this.params.divLineAlpha = getFN(atts["divlinealpha"], this.defColors.get2DDivLineAlpha(this.params.palette));
		this.params.divLineIsDashed = toBoolean(getFN(atts["divlineisdashed"], 0));
		this.params.divLineDashLen = getFN(atts["divlinedashlen"], 4);
		this.params.divLineDashGap = getFN(atts["divlinedashgap"], 2);
		//Zero Plane properties
		this.params.showZeroPlane = toBoolean(getFN(atts["showzeroplane"], 1));
		this.params.zeroPlaneColor = formatColor(getFV(atts["zeroplanecolor"], this.params.divLineColor));
		this.params.zeroPlaneThickness = getFN(atts["zeroplanethickness"], 1);
		this.params.zeroPlaneAlpha = getFN(atts["zeroplanealpha"], this.params.divLineAlpha);
		//Alternating grid colors
		this.params.showAlternateHGridColor = toBoolean(getFN(atts["showalternatehgridcolor"], 1));
		this.params.alternateHGridColor = formatColor(getFV(atts["alternatehgridcolor"], this.defColors.get2DAltHGridColor(this.params.palette)));
		this.params.alternateHGridAlpha = getFN(atts["alternatehgridalpha"], this.defColors.get2DAltHGridAlpha(this.params.palette));
		//Line Properties
		this.params.lineThickness = getFN(atts["linethickness"], 2);
		this.params.lineAlpha = getFN(atts["linealpha"], 100);
		//Line Dash Properties
		this.params.lineDashed = toBoolean(getFN(atts["linedashed"], 0));
		this.params.lineDashLen = getFN(atts["linedashlen"], 5);
		this.params.lineDashGap = getFN(atts["linedashgap"], 4);
		//Anchor Properties
		this.params.drawAnchors = toBoolean(getFN(atts["drawanchors"], atts["showanchors"], 1));
		this.params.anchorSides = atts["anchorsides"];
		this.params.anchorRadius = getFN(atts["anchorradius"], 3);
		this.params.anchorBorderColor = atts["anchorbordercolor"];
		this.params.anchorBorderThickness = getFN(atts["anchorborderthickness"], 1);
		this.params.anchorBgColor = formatColor(getFV(atts["anchorbgcolor"], this.defColors.get2DAnchorBgColor(this.params.palette)));
		this.params.anchorAlpha = getFN(atts["anchoralpha"], 100);
		this.params.anchorBgAlpha = getFN(atts["anchorbgalpha"], this.params.anchorAlpha);
		//Tool Tip - Show/Hide, Background Color, Border Color, Separator Character
		this.params.showToolTip = toBoolean(getFN(atts["showtooltip"], atts["showhovercap"], 1));
		this.params.seriesNameInToolTip = toBoolean(getFN(atts["seriesnameintooltip"], 1));
		this.params.toolTipBgColor = formatColor(getFV(atts["tooltipbgcolor"], atts["hovercapbgcolor"], atts["hovercapbg"], this.defColors.get2DToolTipBgColor(this.params.palette)));
		this.params.toolTipBorderColor = formatColor(getFV(atts["tooltipbordercolor"], atts["hovercapbordercolor"], atts["hovercapborder"], this.defColors.get2DToolTipBorderColor(this.params.palette)));
		this.params.toolTipSepChar = getFV(atts["tooltipsepchar"], atts["hovercapsepchar"], ", ");
		//Font Properties
		this.params.baseFont = getFV(atts["basefont"], "Verdana");
		this.params.baseFontSize = getFN(atts["basefontsize"], 10);
		this.params.baseFontColor = formatColor(getFV(atts["basefontcolor"], this.defColors.get2DBaseFontColor(this.params.palette)));
		this.params.outCnvBaseFont = getFV(atts["outcnvbasefont"], this.params.baseFont);
		this.params.outCnvBaseFontSize = getFN(atts["outcnvbasefontsize"], this.params.baseFontSize);
		this.params.outCnvBaseFontColor = formatColor(getFV(atts["outcnvbasefontcolor"], this.params.baseFontColor));
		// ------------------------- NUMBER FORMATTING ---------------------------- //
		//Option whether the format the number (using Commas)
		this.params.formatNumber = toBoolean(getFN(atts["formatnumber"], 1));
		//Option to format number scale
		this.params.formatNumberScale = toBoolean(getFN(atts["formatnumberscale"], 1));
		//Number Scales
		this.params.defaultNumberScale = getFV(atts["defaultnumberscale"], "");
		this.params.numberScaleUnit = getFV(atts["numberscaleunit"], "K,M");
		this.params.numberScaleValue = getFV(atts["numberscalevalue"], "1000,1000");
		//Number prefix and suffix
		this.params.numberPrefix = getFV(atts["numberprefix"], "");
		this.params.numberSuffix = getFV(atts["numbersuffix"], "");
		//Decimal Separator Character
		this.params.decimalSeparator = getFV(atts["decimalseparator"], ".");
		//Thousand Separator Character
		this.params.thousandSeparator = getFV(atts["thousandseparator"], ",");
		//Input decimal separator and thousand separator. In some european countries,
		//commas are used as decimal separators and dots as thousand separators. In XML,
		//if the user specifies such values, it will give a error while converting to
		//number. So, we accept the input decimal and thousand separator from user, so that
		//we can covert it accordingly into the required format.
		this.params.inDecimalSeparator = getFV(atts["indecimalseparator"], "");
		this.params.inThousandSeparator = getFV(atts["inthousandseparator"], "");
		//Decimal Precision (number of decimal places to be rounded to)
		this.params.decimals = getFV(atts["decimals"], atts["decimalprecision"]);
		//Force Decimal Padding
		this.params.forceDecimals = toBoolean(getFN(atts["forcedecimals"], 0));
		//y-Axis values decimals
		this.params.yAxisValueDecimals = getFV(atts["yaxisvaluedecimals"], atts["yaxisvaluesdecimals"], atts["divlinedecimalprecision"], atts["limitsdecimalprecision"]);
		// ---------------------- Image Saving ------------------------------//
		this.params.imageSave = toBoolean (getFN (atts ["imagesave"] , 0));
		this.params.imageSaveURL = getFV (atts ["imagesaveurl"] , "");
		this.params.imageSaveDialogColor = formatColor (getFV (atts ["imagesavedialogcolor"] , "E2E2E2"));
		this.params.imageSaveDialogFontColor = formatColor (getFV (atts ["imagesavedialogfontcolor"] , "666666"));
	}
	/**
	* calculateAxisLimits method sets the axis limits for the chart.
	* It gets the minimum and maximum value specified in data and
	* based on that it calls super.getAxisLimits();
	*/
	private function calculateAxisLimits():Void {
		//Calculate for x-axis
		this.getXAxisLimits(this.getMaxXDataValue(), this.getMinXDataValue());
		//Calculate for y-axis
		this.getYAxisLimits(this.getMaxYDataValue(), this.getMinYDataValue(), false, !this.params.setAdaptiveYMin);
	}
	/**
	* setStyleDefaults method sets the default values for styles or
	* extracts information from the attributes and stores them into
	* style objects.
	*/
	private function setStyleDefaults():Void {
		//Default font object for Caption
		//-----------------------------------------------------------------//
		var captionFont = new StyleObject();
		captionFont.name = "_SdCaptionFont";
		captionFont.align = "center";
		captionFont.valign = "top";
		captionFont.bold = "1";
		captionFont.font = this.params.outCnvBaseFont;
		captionFont.size = this.params.outCnvBaseFontSize;
		captionFont.color = this.params.outCnvBaseFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.CAPTION, captionFont, this.styleM.TYPE.FONT, null);
		delete captionFont;
		//-----------------------------------------------------------------//
		//Default font object for SubCaption
		//-----------------------------------------------------------------//
		var subCaptionFont = new StyleObject();
		subCaptionFont.name = "_SdSubCaptionFont";
		subCaptionFont.align = "center";
		subCaptionFont.valign = "top";
		subCaptionFont.bold = "1";
		subCaptionFont.font = this.params.outCnvBaseFont;
		subCaptionFont.size = this.params.outCnvBaseFontSize;
		subCaptionFont.color = this.params.outCnvBaseFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.SUBCAPTION, subCaptionFont, this.styleM.TYPE.FONT, null);
		delete subCaptionFont;
		//-----------------------------------------------------------------//
		//Default font object for YAxisName
		//-----------------------------------------------------------------//
		var yAxisNameFont = new StyleObject();
		yAxisNameFont.name = "_SdYAxisNameFont";
		yAxisNameFont.align = "center";
		yAxisNameFont.valign = "middle";
		yAxisNameFont.bold = "1";
		yAxisNameFont.font = this.params.outCnvBaseFont;
		yAxisNameFont.size = this.params.outCnvBaseFontSize;
		yAxisNameFont.color = this.params.outCnvBaseFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.YAXISNAME, yAxisNameFont, this.styleM.TYPE.FONT, null);
		delete yAxisNameFont;
		//-----------------------------------------------------------------//
		//Default font object for XAxisName
		//-----------------------------------------------------------------//
		var xAxisNameFont = new StyleObject();
		xAxisNameFont.name = "_SdXAxisNameFont";
		xAxisNameFont.align = "center";
		xAxisNameFont.valign = "middle";
		xAxisNameFont.bold = "1";
		xAxisNameFont.font = this.params.outCnvBaseFont;
		xAxisNameFont.size = this.params.outCnvBaseFontSize;
		xAxisNameFont.color = this.params.outCnvBaseFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.XAXISNAME, xAxisNameFont, this.styleM.TYPE.FONT, null);
		delete xAxisNameFont;
		//-----------------------------------------------------------------//
		//Default font object for trend lines
		//-----------------------------------------------------------------//
		var trendFont = new StyleObject();
		trendFont.name = "_SdTrendFontFont";
		trendFont.font = this.params.outCnvBaseFont;
		trendFont.size = this.params.outCnvBaseFontSize;
		trendFont.color = this.params.outCnvBaseFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.TRENDVALUES, trendFont, this.styleM.TYPE.FONT, null);
		this.styleM.overrideStyle(this.objects.VTRENDVALUES, trendFont, this.styleM.TYPE.FONT, null);
		delete trendFont;
		//-----------------------------------------------------------------//
		//Default font object for yAxisValues
		//-----------------------------------------------------------------//
		var yAxisValuesFont = new StyleObject();
		yAxisValuesFont.name = "_SdYAxisValuesFont";
		yAxisValuesFont.align = "right";
		yAxisValuesFont.valign = "middle";
		yAxisValuesFont.font = this.params.outCnvBaseFont;
		yAxisValuesFont.size = this.params.outCnvBaseFontSize;
		yAxisValuesFont.color = this.params.outCnvBaseFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.YAXISVALUES, yAxisValuesFont, this.styleM.TYPE.FONT, null);
		delete yAxisValuesFont;
		//-----------------------------------------------------------------//
		//Default font object for DataLabels
		//-----------------------------------------------------------------//
		var dataLabelsFont = new StyleObject();
		dataLabelsFont.name = "_SdDataLabelsFont";
		dataLabelsFont.align = "center";
		dataLabelsFont.valign = "bottom";
		dataLabelsFont.font = this.params.catFont;
		dataLabelsFont.size = this.params.catFontSize;
		dataLabelsFont.color = this.params.catFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.DATALABELS, dataLabelsFont, this.styleM.TYPE.FONT, null);
		delete dataLabelsFont;
		//-----------------------------------------------------------------//
		//Default font object for Legend
		//-----------------------------------------------------------------//
		var legendFont = new StyleObject();
		legendFont.name = "_SdLegendFont";
		legendFont.font = this.params.outCnvBaseFont;
		legendFont.size = this.params.outCnvBaseFontSize;
		legendFont.color = this.params.outCnvBaseFontColor;
		legendFont.ishtml = 1;
		legendFont.leftmargin = 3;
		//Over-ride
		this.styleM.overrideStyle(this.objects.LEGEND, legendFont, this.styleM.TYPE.FONT, null);
		delete legendFont;
		//-----------------------------------------------------------------//
		//Default font object for DataValues
		//-----------------------------------------------------------------//
		var dataValuesFont = new StyleObject();
		dataValuesFont.name = "_SdDataValuesFont";
		dataValuesFont.align = "center";
		dataValuesFont.valign = "middle";
		dataValuesFont.font = this.params.baseFont;
		dataValuesFont.size = this.params.baseFontSize;
		dataValuesFont.color = this.params.baseFontColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.DATAVALUES, dataValuesFont, this.styleM.TYPE.FONT, null);
		delete dataValuesFont;
		//-----------------------------------------------------------------//
		//Default font object for ToolTip
		//-----------------------------------------------------------------//
		var toolTipFont = new StyleObject();
		toolTipFont.name = "_SdToolTipFont";
		toolTipFont.font = this.params.baseFont;
		toolTipFont.size = this.params.baseFontSize;
		toolTipFont.color = this.params.baseFontColor;
		toolTipFont.bgcolor = this.params.toolTipBgColor;
		toolTipFont.bordercolor = this.params.toolTipBorderColor;
		//Over-ride
		this.styleM.overrideStyle(this.objects.TOOLTIP, toolTipFont, this.styleM.TYPE.FONT, null);
		delete toolTipFont;
		//-----------------------------------------------------------------//
		//Default Effect (Shadow) object for Legend
		//-----------------------------------------------------------------//
		if (this.params.legendShadow) {
			var legendShadow = new StyleObject();
			legendShadow.name = "_SdLegendShadow";
			legendShadow.distance = 2;
			legendShadow.alpha = 90;
			legendShadow.angle = 45;
			//Over-ride     
			this.styleM.overrideStyle(this.objects.LEGEND, legendShadow, this.styleM.TYPE.SHADOW, null);
			delete legendShadow;
		}
		//-----------------------------------------------------------------// 
		//Default Animation object for DataPlot (if required)
		//-----------------------------------------------------------------//
		if (this.params.defaultAnimation) {
			//We need three animation objects.
			//1. XScale for data plot						
			var dataPlotAnim = new StyleObject();
			dataPlotAnim.name = "_SdDataPlotAnimXScale";
			dataPlotAnim.param = "_xscale";
			dataPlotAnim.easing = "regular";
			dataPlotAnim.wait = 0;
			dataPlotAnim.start = 0;
			dataPlotAnim.duration = 0.7;
			//Over-ride
			this.styleM.overrideStyle(this.objects.DATAPLOT, dataPlotAnim, this.styleM.TYPE.ANIMATION, "_xscale");
			delete dataPlotAnim;
			//2. YScale for data plot
			var dataPlotAnimY = new StyleObject();
			dataPlotAnimY.name = "_SdDataPlotAnimYScale";
			dataPlotAnimY.param = "_yscale";
			dataPlotAnimY.easing = "regular";
			dataPlotAnimY.wait = 0.7;
			dataPlotAnimY.start = 0.1;
			dataPlotAnimY.duration = 0.7;
			//Over-ride
			this.styleM.overrideStyle(this.objects.DATAPLOT, dataPlotAnimY, this.styleM.TYPE.ANIMATION, "_yscale");
			delete dataPlotAnimY;
			//3. Alpha effect for anchors				
			var anchorsAnim = new StyleObject();
			anchorsAnim.name = "_SdDataAnchorAnim";
			anchorsAnim.param = "_alpha";
			anchorsAnim.easing = "regular";
			anchorsAnim.wait = 0;
			anchorsAnim.start = 0;
			anchorsAnim.duration = 0.5;
			//Over-ride
			this.styleM.overrideStyle(this.objects.ANCHORS, anchorsAnim, this.styleM.TYPE.ANIMATION, "_alpha");
			delete anchorsAnim;
		}
		//-----------------------------------------------------------------//     
	}
	/**
	 * calcCanvasCoords method calculates the co-ordinates of the canvas
	 * taking into consideration everything that is to be drawn on the chart.	 
	 * It finally stores the canvas as an object.
	 * Over-riding method from super XYPlotChart Class as this references
	 * the button for canvas position calculations. 
	*/
	private function calcCanvasCoords(){
		//Loop variable
		var i:Number;
		//Based on label step, set showLabel of each data point as required.
		//Visible label count
		var visibleCount:Number = 0;
		var finalVisibleCount:Number = 0;
		for (i=1; i<=this.numCat; i++) {
			//Now, the label can be preset to be hidden (set via XML)
			if (this.categories[i].isValid && this.categories[i].showLabel) {
				visibleCount++;
				//If label step is defined, we need to set showLabel of those
				//labels which fall on step as false.
				if ((i-1)%this.params.labelStep == 0) {
					this.categories[i].showLabel = true;
				} else {
					this.categories[i].showLabel = false;
				}
			}
			//Update counter     
			finalVisibleCount = (this.categories[i].showLabel) ? (finalVisibleCount+1) : (finalVisibleCount);
		}		
		//We now need to calculate the available Width on the canvas.
		//Available width = total Chart width minus the list below
		// - Left and Right Margin
		// - yAxisName (if to be shown)
		// - yAxisValues
		// - Trend line display values (both left side and right side).
		// - Legend (If to be shown at right)
		var canvasWidth:Number = this.width-(this.params.chartLeftMargin+this.params.chartRightMargin);
		//Set canvas startX
		var canvasStartX:Number = this.params.chartLeftMargin;
		//Now, if y-axis name is to be shown, simulate it and get the width
		if (this.params.yAxisName != "") {
			//Get style object
			var yAxisNameStyle:Object = this.styleM.getTextStyle(this.objects.YAXISNAME);
			if (this.params.rotateYAxisName) {
				//Set embedded font - as we need to rotate
				yAxisNameStyle.font = _embeddedFont;
				//Un-bold and un-italicize
				yAxisNameStyle.bold = false;
				yAxisNameStyle.italic = false;
				//Create text field to get width
				var yAxisNameObj:Object = createText(true, this.params.yAxisName, this.tfTestMC, 1, testTFX, testTFY, 90, yAxisNameStyle, false, 0, 0);
				//Accomodate width and padding
				canvasStartX = canvasStartX+yAxisNameObj.width+this.params.yAxisNamePadding;
				canvasWidth = canvasWidth-yAxisNameObj.width-this.params.yAxisNamePadding;
				//Create element for yAxisName - to store width/height
				this.elements.yAxisName = returnDataAsElement(0, 0, yAxisNameObj.width, yAxisNameObj.height);
			} else {
				//If the y-axis name is not to be rotated
				//Calculate the width of the text if in full horizontal mode
				//Create text field to get width
				var yAxisNameObj:Object = createText(true, this.params.yAxisName, this.tfTestMC, 1, testTFX, testTFY, 0, yAxisNameStyle, false, 0, 0);
				//Get a value for this.params.yAxisNameWidth
				this.params.yAxisNameWidth = Number(getFV(this.params.yAxisNameWidth, yAxisNameObj.width));
				//Get the lesser of the width (to avoid un-necessary space)				
				this.params.yAxisNameWidth = Math.min(this.params.yAxisNameWidth, yAxisNameObj.width);
				//Accomodate width and padding
				canvasStartX = canvasStartX+this.params.yAxisNameWidth+this.params.yAxisNamePadding;
				canvasWidth = canvasWidth-this.params.yAxisNameWidth-this.params.yAxisNamePadding;
				//Create element for yAxisName - to store width/height
				this.elements.yAxisName = returnDataAsElement(0, 0, this.params.yAxisNameWidth, yAxisNameObj.height);
			}
			delete yAxisNameStyle;
			delete yAxisNameObj;
		}
		//Accomodate width for y-axis values. Now, y-axis values conists of two parts         
		//(for backward compatibility) - limits (upper and lower) and div line values.
		//So, we'll have to individually run through both of them.
		var yAxisValMaxWidth:Number = 0;
		var divLineObj:Object;
		var divStyle:Object = this.styleM.getTextStyle(this.objects.YAXISVALUES);
		//Iterate through all the div line values
		for (i=1; i<this.divLines.length; i++) {
			//If div line value is to be shown
			if (this.divLines[i].showValue) {
				//If it's the first or last div Line (limits), and it's to be shown
				if ((i == 1) || (i == this.divLines.length-1)) {
					if (this.params.showLimits) {
						//Get the width of the text
						divLineObj = createText(true, this.divLines[i].displayValue, this.tfTestMC, 1, testTFX, testTFY, 0, divStyle, false, 0, 0);
						//Accomodate
						yAxisValMaxWidth = (divLineObj.width>yAxisValMaxWidth) ? (divLineObj.width) : (yAxisValMaxWidth);
					}
				} else {
					//It's a div interval - div line
					//So, check if we've to show div line values
					if (this.params.showDivLineValues) {
						//Get the width of the text
						divLineObj = createText(true, this.divLines[i].displayValue, this.tfTestMC, 1, testTFX, testTFY, 0, divStyle, false, 0, 0);
						//Accomodate
						yAxisValMaxWidth = (divLineObj.width>yAxisValMaxWidth) ? (divLineObj.width) : (yAxisValMaxWidth);
					}
				}
			}
		}
		delete divLineObj;
		//Also iterate through all trend lines whose values are to be shown on
		//left side of the canvas.
		//Get style object
		var trendStyle:Object = this.styleM.getTextStyle(this.objects.TRENDVALUES);
		var trendObj:Object;
		for (i=1; i<=this.numTrendLines; i++) {
			if (this.trendLines[i].isValid == true && this.trendLines[i].valueOnRight == false) {
				//If it's a valid trend line and value is to be shown on left
				//Get the width of the text
				trendObj = createText(true, this.trendLines[i].displayValue, this.tfTestMC, 1, testTFX, testTFY, 0, trendStyle, false, 0, 0);
				//Accomodate
				yAxisValMaxWidth = (trendObj.width>yAxisValMaxWidth) ? (trendObj.width) : (yAxisValMaxWidth);
			}
		}
		//Accomodate for y-axis/left-trend line values text width
		if (yAxisValMaxWidth>0) {
			canvasStartX = canvasStartX+yAxisValMaxWidth+this.params.yAxisValuesPadding;
			canvasWidth = canvasWidth-yAxisValMaxWidth-this.params.yAxisValuesPadding;
		}
		var trendRightWidth:Number = 0;
		//Now, also check for trend line values that fall on right
		for (i=1; i<=this.numTrendLines; i++) {
			if (this.trendLines[i].isValid == true && this.trendLines[i].valueOnRight == true) {
				//If it's a valid trend line and value is to be shown on right
				//Get the width of the text
				trendObj = createText(true, this.trendLines[i].displayValue, this.tfTestMC, 1, testTFX, testTFY, 0, trendStyle, false, 0, 0);
				//Accomodate
				trendRightWidth = (trendObj.width>trendRightWidth) ? (trendObj.width) : (trendRightWidth);
			}
		}
		delete trendObj;
		//Accomodate trend right text width
		if (trendRightWidth>0) {
			canvasWidth = canvasWidth-trendRightWidth-this.params.yAxisValuesPadding;
		}
		//Round them off finally to avoid distorted pixels    
		canvasStartX = int(canvasStartX);
		canvasWidth = int(canvasWidth);
		//We finally have canvas Width and canvas Start X
		//-----------------------------------------------------------------------------------//
		//Now, we need to calculate the available Height on the canvas.
		//Available height = total Chart height minus the list below
		// - Chart Top and Bottom Margins
		// - Space for Caption, Sub Caption and caption padding
		// - Height of data labels
		// - xAxisName
		// - Vertical trend line values
		// - Legend (If to be shown at bottom position)
		//Initialize canvasHeight to total height minus margins
		var canvasHeight:Number = this.height-(this.params.chartTopMargin+this.params.chartBottomMargin);
		//Set canvasStartY
		var canvasStartY:Number = this.params.chartTopMargin;
		//Now, if we've to show caption
		if (this.params.caption != "") {
			//Create text field to get height
			var captionObj:Object = createText(true, this.params.caption, this.tfTestMC, 1, testTFX, testTFY, 0, this.styleM.getTextStyle(this.objects.CAPTION), false, 0, 0);
			//Store the height
			canvasStartY = canvasStartY+captionObj.height;
			canvasHeight = canvasHeight-captionObj.height;
			//Create element for caption - to store width & height
			this.elements.caption = returnDataAsElement(0, 0, captionObj.width, captionObj.height);
			delete captionObj;
		}
		//Now, if we've to show sub-caption         
		if (this.params.subCaption != "") {
			//Create text field to get height
			var subCaptionObj:Object = createText(true, this.params.subCaption, this.tfTestMC, 1, testTFX, testTFY, 0, this.styleM.getTextStyle(this.objects.SUBCAPTION), false, 0, 0);
			//Store the height
			canvasStartY = canvasStartY+subCaptionObj.height;
			canvasHeight = canvasHeight-subCaptionObj.height;
			//Create element for sub caption - to store height
			this.elements.subCaption = returnDataAsElement(0, 0, subCaptionObj.width, subCaptionObj.height);
			delete subCaptionObj;
		}
		//Now, if either caption or sub-caption was shown, we also need to adjust caption padding         
		if (this.params.caption != "" || this.params.subCaption != "") {
			//Account for padding
			canvasStartY = canvasStartY+this.params.captionPadding;
			canvasHeight = canvasHeight-this.params.captionPadding;
		}
		//Now, if data labels are to be shown, we need to account for their heights     
		//Data labels can be rendered in 3 ways:
		//1. Normal - no staggering - no wrapping - no rotation
		//2. Wrapped - no staggering - no rotation
		//3. Staggered - no wrapping - no rotation
		//4. Rotated - no staggering - no wrapping
		//Placeholder to store max height
		this.config.maxLabelHeight = 0;
		this.config.labelAreaHeight = 0;
		var labelObj:Object;
		var labelStyleObj:Object = this.styleM.getTextStyle(this.objects.DATALABELS);
		if (this.params.labelDisplay == "ROTATE") {
			//Case 4: If the labels are rotated, we iterate through all the string labels
			//provided to us and get the height and store max.
			for (i=1; i<=this.numCat; i++) {
				//If the label is to be shown
				if (this.categories[i].isValid && this.categories[i].showLabel) {
					//Set style bold/italic to false and font to embedded font
					labelStyleObj.font = _embeddedFont;
					labelStyleObj.bold = false;
					labelStyleObj.italic = false;
					//Create text box and get height
					labelObj = createText(true, this.categories[i].label, this.tfTestMC, 1, testTFX, testTFY, this.config.labelAngle, labelStyleObj, false, 0, 0);
					//Store the larger
					this.config.maxLabelHeight = (labelObj.height>this.config.maxLabelHeight) ? (labelObj.height) : (this.config.maxLabelHeight);
				}
			}
			//Store max label height as label area height.
			this.config.labelAreaHeight = this.config.maxLabelHeight;
		} else if (this.params.labelDisplay == "WRAP") {
			//Case 2 (WRAP): Create all the labels on the chart. Set width as
			//totalAvailableWidth/finalVisibleCount.
			//Set max height as 50% of available canvas height at this point of time. Find all
			//and select the max one.
			var maxLabelWidth:Number = (canvasWidth/finalVisibleCount);
			var maxLabelHeight:Number = (canvasHeight/2);
			//Store it in config for later usage
			this.config.wrapLabelWidth = maxLabelWidth;
			this.config.wrapLabelHeight = maxLabelHeight;
			for (i=1; i<=this.numCat; i++) {
				//If the label is to be shown
				if (this.categories[i].isValid && this.categories[i].showLabel) {
					//Create text box and get height
					labelObj = createText(true, this.categories[i].label, this.tfTestMC, 1, testTFX, testTFY, 0, labelStyleObj, true, maxLabelWidth, maxLabelHeight);
					//Store the larger
					this.config.maxLabelHeight = (labelObj.height>this.config.maxLabelHeight) ? (labelObj.height) : (this.config.maxLabelHeight);
				}
			}
			//Store max label height as label area height.
			this.config.labelAreaHeight = this.config.maxLabelHeight;
		} else {
			//Case 1,3: Normal or Staggered Label
			//We iterate through all the labels, and if any of them has &lt or < (HTML marker)
			//embedded in them, we add them to the array, as for them, we'll need to individually
			//create and see the text height. Also, the first element in the array - we set as
			//ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_=....
			//Create array to store labels.
			var strLabels:Array = new Array();
			strLabels.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_=/*-+~`");
			//Now, iterate through all the labels and for those visible labels, whcih have < sign,
			//add it to array.
			for (i=1; i<=this.numCat; i++) {
				//If the label is to be shown
				if (this.categories[i].isValid && this.categories[i].showLabel) {
					if ((this.categories[i].label.indexOf("&lt;")>-1) || (this.categories[i].label.indexOf("<")>-1)) {
						strLabels.push(this.categories[i].label);
					}
				}
			}
			//Now, we've the array for which we've to check height (for each element).
			for (i=0; i<strLabels.length; i++) {
				//Create text box and get height
				labelObj = createText(true, this.categories[i].label, this.tfTestMC, 1, testTFX, testTFY, 0, labelStyleObj, false, 0, 0);
				//Store the larger
				this.config.maxLabelHeight = (labelObj.height>this.config.maxLabelHeight) ? (labelObj.height) : (this.config.maxLabelHeight);
			}
			//We now have the max label height. If it's staggered, then store accordingly, else
			//simple mode
			if (this.params.labelDisplay == "STAGGER") {
				//Multiply max label height by stagger lines.
				this.config.labelAreaHeight = this.params.staggerLines*this.config.maxLabelHeight;
			} else {
				this.config.labelAreaHeight = this.config.maxLabelHeight;
			}
		}
		if (this.config.labelAreaHeight>0) {
			//Deduct the calculated label height from canvas height
			canvasHeight = canvasHeight-this.config.labelAreaHeight-this.params.labelPadding;
		}
		//Delete objects       
		delete labelObj;
		delete labelStyleObj;
		
		//If any vertical trend line values are to be shown
		var trendObj:Object;
		var trendStyle:Object = this.styleM.getTextStyle(this.objects.TRENDVALUES);
		var trendHeight:Number = 0;
		//Now, also check for trend line values that fall on right
		this.config.vTrendHeight = 0;
		for (i=1; i<=this.numVTrendLines; i++) {
			if (this.vTrendLines[i].isValid == true) {
				//If it's a valid trend line
				//Get the height of the text
				trendObj = createText(true, this.vTrendLines[i].displayValue, this.tfTestMC, 1, testTFX, testTFY, 0, trendStyle, false, 0, 0);
				//Accomodate
				trendHeight = (trendObj.height>trendHeight) ? (trendObj.height) : (trendHeight);				
			}
		}		
		delete trendObj;
		//Accomodate
		if (trendHeight>0){
			canvasHeight = canvasHeight-trendHeight;
			//Store vertical trend line text height - will be used later to adjust x-axis name.
			this.config.vTrendHeight = trendHeight;
		}		
		//Accomodate space for xAxisName (if to be shown);
		if (this.params.xAxisName != "") {
			//Create text field to get height
			var xAxisNameObj:Object = createText(true, this.params.xAxisName, this.tfTestMC, 1, testTFX, testTFY, 0, this.styleM.getTextStyle(this.objects.XAXISNAME), false, 0, 0);
			//Store the height
			canvasHeight = canvasHeight-xAxisNameObj.height-this.params.xAxisNamePadding;
			//Object to store width and height of xAxisName
			this.elements.xAxisName = returnDataAsElement(0, 0, xAxisNameObj.width, xAxisNameObj.height);
			delete xAxisNameObj;
		}
		//We now check whether the form Button is to be shown
		if (this.params.showFormBtn){
			//Width of the form Button
			var btnWidth:Number = this.params.formBtnWidth;
			//Height of the form Button
			var btnHeight:Number = 20;
			//Now deduct the height from the calculated canvas height
			canvasHeight = canvasHeight-btnHeight-this.params.btnPadding;
			//Set the button position
			this.elements.btn = returnDataAsElement(this.width - this.params.chartRightMargin - btnWidth - this.params.btnPadding, this.height - this.params.chartBottomMargin - btnHeight/2- this.params.btnPadding, btnWidth, btnHeight); 
		}
		//We have canvas start Y and canvas height     
		//We now check whether the legend is to be drawn 
		if (this.params.showLegend){
			//Object to store dimensions
			var lgndDim:Object;
			//Create container movie clip for legend
			this.lgndMC = this.cMC.createEmptyMovieClip("Legend",this.dm.getDepth("LEGEND"));
			//Create instance of legend			
			if (this.params.legendPosition=="BOTTOM"){
				//Maximum Height - 50% of stage
				lgnd = new Legend(lgndMC, this.styleM.getTextStyle(this.objects.LEGEND), this.params.legendPosition, canvasStartX + canvasWidth/2, this.height/2, canvasWidth, (this.height-(this.params.chartTopMargin+this.params.chartBottomMargin))*0.5, this.params.legendAllowDrag, this.width, this.height, this.params.legendBgColor, this.params.legendBgAlpha, this.params.legendBorderColor, this.params.legendBorderThickness, this.params.legendBorderAlpha, this.params.legendScrollBgColor, this.params.legendScrollBarColor, this.params.legendScrollBtnColor);
			}
			else {
				//Maximum Width - 40% of stage
				lgnd = new Legend(lgndMC, this.styleM.getTextStyle(this.objects.LEGEND), this.params.legendPosition, this.width/2, canvasStartY + canvasHeight/2, (this.width-(this.params.chartLeftMargin+this.params.chartRightMargin))*0.4, canvasHeight, this.params.legendAllowDrag, this.width, this.height, this.params.legendBgColor, this.params.legendBgAlpha, this.params.legendBorderColor, this.params.legendBorderThickness, this.params.legendBorderAlpha, this.params.legendScrollBgColor, this.params.legendScrollBarColor, this.params.legendScrollBtnColor);			
			}
			//Feed data set series Name for legend
			for (i=1; i<=this.numDS; i++){
				if (this.dataset[i].includeInLegend && this.dataset[i].seriesName!=""){
					lgnd.addItem(this.dataset[i].seriesName, this.dataset[i].color);
				}
			}			
			//If user has defined a caption for the legend, set it
			if (this.params.legendCaption!=""){
				lgnd.setCaption(this.params.legendCaption);
			}
			//Whether to use circular marker
			lgnd.useCircleMarker(this.params.legendMarkerCircle);
			if (this.params.legendPosition=="BOTTOM"){
				lgndDim = lgnd.getDimensions();
				//Now deduct the height from the calculated canvas height
				canvasHeight = canvasHeight-lgndDim.height-this.params.legendPadding;
				if(this.params.showFormBtn) {
					//Re-set the legend position
					this.lgnd.resetXY(canvasStartX + canvasWidth/2, this.elements.btn.y - this.params.btnPadding - this.elements.btn.h/2 +this.params.legendPadding -lgndDim.height/2);
				}
				else {
					//Re-set the legend position
					this.lgnd.resetXY(canvasStartX + canvasWidth/2, this.height - this.params.chartBottomMargin - lgndDim.height/2);
				}
			}
			else{
				//Get dimensions
				lgndDim = lgnd.getDimensions();
				//Now deduct the width from the calculated canvas width
				canvasWidth = canvasWidth-lgndDim.width-this.params.legendPadding;
				//Right position
				this.lgnd.resetXY(this.width - this.params.chartRightMargin - lgndDim.width/2, canvasStartY + canvasHeight/2);
			}
		}
		//Create an element to represent the canvas now.
		this.elements.canvas = returnDataAsElement(canvasStartX, canvasStartY, canvasWidth, canvasHeight);
	}
	/**
	* calculatePoints method calculates the various points on the chart.
	*/
	private function calculatePoints() {
		//Loop variable
		var i:Number;
		var j:Number;
		//Format all the numbers on the chart and store their display values
		//We format and store here itself, so that later, whenever needed,
		//we just access displayValue instead of formatting once again.
		//Also set tool tip text values
		var toolText:String;
		for (i=1; i<=this.numDS; i++) {
			for (j=1; j<=this.dataset[i].num; j++) {
				//Format and store
				this.dataset[i].data[j].displayValue = formatNumber(this.dataset[i].data[j].yv, this.params.formatNumber, this.params.decimals, this.params.forceDecimals, this.params.formatNumberScale, this.params.defaultNumberScale, this.config.nsv, this.config.nsu, this.params.numberPrefix, this.params.numberSuffix);
				//Tool tip text.
				//Preferential Order - Set Tool Text (No concatenation) > SeriesName + Cat Name + Value
				if (this.dataset[i].data[j].toolText == undefined || this.dataset[i].data[j].toolText == "") {
					//If the tool tip text is not already defined
					//If labels have been defined
					toolText = (this.params.seriesNameInToolTip && this.dataset[i].seriesName != "") ? (this.dataset[i].seriesName+this.params.toolTipSepChar) : "";
					toolText = toolText+this.dataset[i].data[j].xv+this.params.toolTipSepChar;
					toolText = toolText+this.dataset[i].data[j].displayValue;
					this.dataset[i].data[j].toolText = toolText;
				}
			}
		}
		//Calculate x-position of categories
		for (i=1; i<=this.numCat; i++) {
			//If categories is within the valid range
			if (this.categories[i].xv<this.config.xMin || this.categories[i].xv>this.config.xMax){
				this.categories[i].isValid = false;
			}
			this.categories[i].x = this.getAxisPosition(this.categories[i].xv, this.config.xMax, this.config.xMin, this.elements.canvas.x, this.elements.canvas.toX, false, 0);
		}
		//We now need to calculate the position of points on the chart.
		for (i=1; i<=this.numDS; i++) {
			//Now, store the positions of the points
			for (j=1; j<=this.dataset[i].num; j++) {
				this.dataset[i].data[j].x = this.getAxisPosition(this.dataset[i].data[j].xv, this.config.xMax, this.config.xMin, this.elements.canvas.x, this.elements.canvas.toX, false, 0);
				//Set the y position
				this.dataset[i].data[j].y = this.getAxisPosition(this.dataset[i].data[j].yv, this.config.yMax, this.config.yMin, this.elements.canvas.y, this.elements.canvas.toY, true, 0);
			}
		}
		//Set the number of rects to 0 initially
		//Selection rectangle
		this.params.numRects = 0;
	}
	/**
	 * allotDepths method allots the depths for various chart objects
	 * to be rendered. We do this before hand, so that we can later just
	 * go on rendering chart objects, without swapping.
	*/
	private function allotDepths():Void {
		//Background
		this.dm.reserveDepths("BACKGROUND", 1);
		//Click URL Handler
		this.dm.reserveDepths("CLICKURLHANDLER", 1);
		//Background SWF
		this.dm.reserveDepths("BGSWF", 1);
		//Canvas
		this.dm.reserveDepths("CANVAS", 1);
		//If horizontal grid is to be shown    
		if (this.params.showAlternateHGridColor) {
			this.dm.reserveDepths("HGRID", Math.ceil((this.divLines.length+1)/2));
		}
		//Div Lines and their labels 
		this.dm.reserveDepths("DIVLINES", (this.divLines.length*2));
		//Vertical div lines
		this.dm.reserveDepths("VLINES", this.numCat);
		//Zero Plane
		this.dm.reserveDepths("ZEROPLANE", 2);
		//Caption
		this.dm.reserveDepths("CAPTION", 1);
		//Sub-caption
		this.dm.reserveDepths("SUBCAPTION", 1);
		//X-Axis Name
		this.dm.reserveDepths("XAXISNAME", 1);
		//Y-Axis Name
		this.dm.reserveDepths("YAXISNAME", 1);
		//Vertical trend lines
		this.dm.reserveDepths("VTRENDLINES", this.numVTrendLines);
		this.dm.reserveDepths("VTRENDVALUES", this.numVTrendLines);
		//Horizontal Trend lines below plot (lines and their labels)
		this.dm.reserveDepths("TRENDLINESBELOW", this.numTrendLinesBelow);
		this.dm.reserveDepths("TRENDVALUESBELOW", this.numTrendLinesBelow);
		//Data Labels
		this.dm.reserveDepths("DATALABELS", this.numCat);
		//Line Chart
		this.dm.reserveDepths("DATAPLOT", this.numDS);
		//Canvas Border
		this.dm.reserveDepths("CANVASBORDER", 1);
		//Canvas Handler MC
		this.dm.reserveDepths("CANVASHANDLERMC", 1);
		//Anchors
		this.dm.reserveDepths("ANCHORS", this.num*this.numDS);
		//Horizontal Trend lines below plot (lines and their labels)
		this.dm.reserveDepths("TRENDLINESABOVE", (this.numTrendLines-this.numTrendLinesBelow));
		this.dm.reserveDepths("TRENDVALUESABOVE", (this.numTrendLines-this.numTrendLinesBelow));
		//Data Values
		this.dm.reserveDepths("DATAVALUES", this.num*this.numDS);
		//Legend
		this.dm.reserveDepths("LEGEND", 1);
		//Form Button
		this.dm.reserveDepths("FORMBUTTON", 1);
		//Seletion Rectangle 
		this.dm.reserveDepths("SELECTIONRECTANGLE", 1);
	}
	//--------------- VISUAL RENDERING METHODS -------------------------//
	/**
	* drawHeaders method renders the following on the chart:
	* CAPTION, SUBCAPTION, XAXISNAME, YAXISNAME
	*/
	private function drawHeaders() {
		//Render caption
		if (this.params.caption != "") {
			var captionStyleObj:Object = this.styleM.getTextStyle(this.objects.CAPTION);
			captionStyleObj.align = "center";
			captionStyleObj.vAlign = "bottom";
			var captionObj:Object = createText(false, this.params.caption, this.cMC, this.dm.getDepth("CAPTION"), this.elements.canvas.x+(this.elements.canvas.w/2), this.params.chartTopMargin, 0, captionStyleObj, false, 0, 0);
			//Apply animation
			if (this.params.animation) {
				this.styleM.applyAnimation(captionObj.tf, this.objects.CAPTION, this.macro, this.elements.canvas.x+(this.elements.canvas.w/2)-(this.elements.caption.w/2), 0, this.params.chartTopMargin, 0, 100, null, null, null);
			}
			//Apply filters          
			this.styleM.applyFilters(captionObj.tf, this.objects.CAPTION);
			//Delete
			delete captionObj;
			delete captionStyleObj;
		}
		//Render sub caption          
		if (this.params.subCaption != "") {
			var subCaptionStyleObj:Object = this.styleM.getTextStyle(this.objects.SUBCAPTION);
			subCaptionStyleObj.align = "center";
			subCaptionStyleObj.vAlign = "top";
			var subCaptionObj:Object = createText(false, this.params.subCaption, this.cMC, this.dm.getDepth("SUBCAPTION"), this.elements.canvas.x+(this.elements.canvas.w/2), this.elements.canvas.y-this.params.captionPadding, 0, subCaptionStyleObj, false, 0, 0);
			//Apply animation
			if (this.params.animation) {
				this.styleM.applyAnimation(subCaptionObj.tf, this.objects.SUBCAPTION, this.macro, this.elements.canvas.x+(this.elements.canvas.w/2)-(this.elements.subCaption.w/2), 0, this.elements.canvas.y-this.params.captionPadding-this.elements.subCaption.h, 0, 100, null, null, null);
			}
			//Apply filters          
			this.styleM.applyFilters(subCaptionObj.tf, this.objects.SUBCAPTION);
			//Delete
			delete subCaptionObj;
			delete subCaptionStyleObj;
		}
		//Render x-axis name          
		if (this.params.xAxisName != "") {
			var xAxisNameStyleObj:Object = this.styleM.getTextStyle(this.objects.XAXISNAME);
			xAxisNameStyleObj.align = "center";
			xAxisNameStyleObj.vAlign = "bottom";
			var xAxisNameObj:Object = createText(false, this.params.xAxisName, this.cMC, this.dm.getDepth("XAXISNAME"), this.elements.canvas.x+(this.elements.canvas.w/2), this.elements.canvas.toY+this.params.labelPadding+this.config.labelAreaHeight+this.params.xAxisNamePadding+this.config.vTrendHeight, 0, xAxisNameStyleObj, false, 0, 0);
			//Apply animation
			if (this.params.animation) {
				this.styleM.applyAnimation(xAxisNameObj.tf, this.objects.XAXISNAME, this.macro, this.elements.canvas.x+(this.elements.canvas.w/2)-(this.elements.subCaption.w/2), 0, this.elements.canvas.toY+this.config.labelAreaHeight+this.params.xAxisNamePadding, 0, 100, null, null, null);
			}
			//Apply filters          
			this.styleM.applyFilters(xAxisNameObj.tf, this.objects.XAXISNAME);
			//Delete
			delete xAxisNameObj;
			delete xAxisNameStyleObj;
		}
		//Render y-axis name          
		if (this.params.yAxisName != "") {
			var yAxisNameStyleObj:Object = this.styleM.getTextStyle(this.objects.YAXISNAME);
			//Set alignment parameters
			yAxisNameStyleObj.align = "left";
			yAxisNameStyleObj.vAlign = "middle";
			//If the name is to be rotated
			if (this.params.rotateYAxisName) {
				//Set font as the embedded font
				yAxisNameStyleObj.font = _embeddedFont;
				//Set bold/italic to false.
				yAxisNameStyleObj.bold = false;
				yAxisNameStyleObj.italic = false;
				var yAxisNameObj:Object = createText(false, this.params.yAxisName, this.cMC, this.dm.getDepth("YAXISNAME"), this.params.chartLeftMargin, this.elements.canvas.y+(this.elements.canvas.h/2), 270, yAxisNameStyleObj, false, 0, 0);
				//Apply animation
				if (this.params.animation) {
					this.styleM.applyAnimation(yAxisNameObj.tf, this.objects.YAXISNAME, this.macro, this.params.chartLeftMargin, 0, this.elements.canvas.y+(this.elements.canvas.h/2)+(this.elements.yAxisName.h/2), 0, 100, null, null, null);
				}
			} else {
				//We show horizontal name
				//Adding 1 to this.params.yAxisNameWidth and then passing to avoid line breaks				
				var yAxisNameObj:Object = createText(false, this.params.yAxisName, this.cMC, this.dm.getDepth("YAXISNAME"), this.params.chartLeftMargin, this.elements.canvas.y+(this.elements.canvas.h/2), 0, yAxisNameStyleObj, true, this.params.yAxisNameWidth+1, this.elements.canvas.h);
				//Apply animation
				if (this.params.animation) {
					this.styleM.applyAnimation(yAxisNameObj.tf, this.objects.YAXISNAME, this.macro, this.params.chartLeftMargin, 0, yAxisNameObj.tf._y, 0, 100, null, null, null);
				}
			}
			//Apply filters     
			this.styleM.applyFilters(yAxisNameObj.tf, this.objects.YAXISNAME);
			//Delete
			delete yAxisNameObj;
			delete yAxisNameStyleObj;
		}
		//Clear Interval          
		clearInterval(this.config.intervals.headers);
	}
	/**
	* drawLabels method draws the x-axis labels based on the parameters.
	*/
	private function drawLabels() {
		var labelObj:Object;
		var labelStyleObj:Object = this.styleM.getTextStyle(this.objects.DATALABELS);
		var labelYShift:Number;
		var staggerCycle:Number = 0;
		var staggerAddFn:Number = 1;
		var depth:Number = this.dm.getDepth("DATALABELS");
		var i:Number;
		for (i=1; i<=this.numCat; i++) {
			//If the label is to be shown
			if (this.categories[i].isValid && this.categories[i].showLabel) {
				if (this.params.labelDisplay == "ROTATE") {
					//Set style bold/italic to false and font to embedded font
					labelStyleObj.font = _embeddedFont;
					labelStyleObj.bold = false;
					labelStyleObj.italic = false;
					labelStyleObj.align = "center";
					labelStyleObj.vAlign = "bottom";
					//Create text box and get height
					labelObj = createText(false, this.categories[i].label, this.cMC, depth, this.categories[i].x, this.elements.canvas.toY+this.params.labelPadding, this.config.labelAngle, labelStyleObj, false, 0, 0);
				} else if (this.params.labelDisplay == "WRAP") {
					//Case 2 (WRAP)
					//Set alignment
					labelStyleObj.align = "center";
					labelStyleObj.vAlign = "bottom";
					labelObj = createText(false, this.categories[i].label, this.cMC, depth, this.categories[i].x, this.elements.canvas.toY+this.params.labelPadding, 0, labelStyleObj, true, this.config.wrapLabelWidth, this.config.wrapLabelHeight);
				} else if (this.params.labelDisplay == "STAGGER") {
					//Case 3 (Stagger)
					//Set alignment
					labelStyleObj.align = "center";
					labelStyleObj.vAlign = "bottom";
					//Need to get cyclic position for staggered textboxes
					//Matrix formed is of 2*this.params.staggerLines - 2 rows
					var pos:Number = i%(2*this.params.staggerLines-2);
					//Last element needs to be reset
					pos = (pos == 0) ? (2*this.params.staggerLines-2) : pos;
					//Cyclic iteration
					pos = (pos>this.params.staggerLines) ? (this.params.staggerLines-(pos%this.params.staggerLines)) : pos;
					//Get position to 0 base
					pos--;
					//Shift accordingly
					var labelYShift:Number = this.config.maxLabelHeight*pos;
					labelObj = createText(false, this.categories[i].label, this.cMC, depth, this.categories[i].x, this.elements.canvas.toY+this.params.labelPadding+labelYShift, 0, labelStyleObj, false, 0, 0);
				} else {
					//Render normal label
					labelStyleObj.align = "center";
					labelStyleObj.vAlign = "bottom";
					labelObj = createText(false, this.categories[i].label, this.cMC, depth, this.categories[i].x, this.elements.canvas.toY+this.params.labelPadding, 0, labelStyleObj, false, 0, 0);
				}
				//Apply filter
				this.styleM.applyFilters(labelObj.tf, this.objects.DATALABELS);
				//Apply animation
				if (this.params.animation) {
					this.styleM.applyAnimation(labelObj.tf, this.objects.DATALABELS, this.macro, labelObj.tf._x, 0, labelObj.tf._y, 0, 100, null, null, null);
				}
				//Increase depth 
				depth++;
			}
		}
		//Clear interval
		clearInterval(this.config.intervals.labels);
	}
	/**
	 * drawHandlerMC method renders the Handler MC to draw a Selectable rectangle over canvas.
	 *	@returns	Nothing
	*/
	private function drawHandlerMC():Void {
		//Create a new movie clip container for canvas
		var handlerMC = this.cMC.createEmptyMovieClip("HandlerMC", this.dm.getDepth("CANVASHANDLERMC"));
		//Move to (-w/2, 0);
		handlerMC.moveTo(-(this.elements.canvas.w/2), -(this.elements.canvas.h/2));
		//Start the fill.
		handlerMC.beginFill(parseInt("FFFFFF", 16), 0);
		//Draw the rectangle with center registration point
		handlerMC.lineTo(this.elements.canvas.w/2, -(this.elements.canvas.h/2));
		handlerMC.lineTo(this.elements.canvas.w/2, this.elements.canvas.h/2);
		handlerMC.lineTo(-(this.elements.canvas.w/2), this.elements.canvas.h/2);
		handlerMC.lineTo(-(this.elements.canvas.w/2), -(this.elements.canvas.h/2));
		//Set the x and y position
		handlerMC._x = this.elements.canvas.x+this.elements.canvas.w/2;
		handlerMC._y = this.elements.canvas.y+this.elements.canvas.h/2;
		//End Fill
		handlerMC.endFill();
		//Set the alpha to 0 - hidden MC
		handlerMC._alpha = 0;
		handlerMC.useHandCursor = false;
		//Now handle the onMouseDown and onMouseUp event to draw the selection rectangle
		//Create Delegate function 
		var fnMouseDown:Function = Delegate.create(this, handlerOnMouseDown);
		//Store the MC reference
		fnMouseDown.mc = handlerMC;
		//Assing the delegates to movie clip handler
		handlerMC.onPress = fnMouseDown;
		//Create Delegate function 
		var fnMouseUp:Function = Delegate.create(this, handlerOnMouseUp);
		//Store the MC reference
		fnMouseUp.mc = handlerMC;
		//Assing the delegates to movie clip handler
		handlerMC.onReleaseOutside = handlerMC.onRelease = fnMouseUp;
	}
	/**
	 * hideAllHandlers method hides the handlers of all the Rectangle except the index of the argument rectangle
	 *	@param	index	index of the rectangle whose handlers are not to be hidden
	*/
	private function hideAllHandlers(index:String):Void {
		//Loop it to set the visibility false for all the select rectangles
		var _item:String;
		for (_item in this.selectRects) {
			//If we find a matching key
			if (_item != index) {
				this.selectRects[_item].clearHandlers();
			}
		}
	}
	/**
	 * drawLineChart method draws the lines on the chart
	*/
	private function drawLineChart():Void {
		/** 
		 * The movie clip structure for each line (dataset) would be :
		 * |- Holder
		 * |- |- Chart
		 * We create child movie clip as we need to animate xscale
		 * and y scale. So, we need to position Chart Movie clip at 0,0
		 * inside holder movie clip and then readjust Holder movie clip's
		 * X and Y Position as per chart's canvas.
		*/
		var m:Number;
		var depth:Number = this.dm.getDepth("DATAPLOT");
		for (m=1; m<=this.numDS; m++) {
			//If Line is to be drawn for this dataset
			if (this.dataset[m].drawLine) {
				//Create holder movie clip
				var holderMC:MovieClip = this.cMC.createEmptyMovieClip("ChartHolder_"+m, depth);
				//Create chart movie clip inside holder movie clip
				var chartMC:MovieClip = holderMC.createEmptyMovieClip("Chart", 1);
				//Loop variables
				var i, j;
				//Variables to store the max and min Y positions
				var maxY:Number, minY:Number;
				//Find the index of the first defined data
				//Initialize with (this.num+1) so that if no defined data is found,
				//next loop automatically terminates
				var firstIndex:Number = this.num+1;
				//Storage container for next plot index
				var nxt:Number;
				for (i=1; i<this.dataset[m].num; i++) {
					if (this.dataset[m].data[i].isDefined) {
						firstIndex = i;
						break;
					}
				}
				//Now, we draw the lines inside chart		
				for (i=firstIndex; i<this.dataset[m].num; i++) {
					//We continue only if this data index is defined
					if (this.dataset[m].data[i].isDefined) {
						//Get next Index
						nxt = i+1;
						//Now, if next index is not defined, draw gap between this data and next data.
						//If next data is not defined. We simply continue to next value of the loop
						if (this.dataset[m].data[nxt].isDefined == false) {
							//Discontinuous plot. So ignore and move to next.
							continue;
						}
						//Set line style    
						chartMC.lineStyle(this.dataset[m].lineThickness, parseInt(this.dataset[m].lineColor, 16), this.dataset[m].lineAlpha);
						//Now, based on whether we've to draw a normal or dashed line, we draw it
						if (this.dataset[m].lineDashed) {
							//Draw a dashed line
							DrawingExt.dashTo(chartMC, this.dataset[m].data[i].x, this.dataset[m].data[i].y, this.dataset[m].data[nxt].x, this.dataset[m].data[nxt].y, this.dataset[m].lineDashLen, this.dataset[m].lineDashGap);
						} else {
							//Move to the point
							chartMC.moveTo(this.dataset[m].data[i].x, this.dataset[m].data[i].y);
							//Draw point to next line
							chartMC.lineTo(this.dataset[m].data[nxt].x, this.dataset[m].data[nxt].y);
						}
						//Get maxY and minY
						maxY = (maxY == undefined || (this.dataset[m].data[i].y>maxY)) ? this.dataset[m].data[i].y : maxY;
						minY = (minY == undefined || (this.dataset[m].data[i].y<minY)) ? this.dataset[m].data[i].y : minY;
						//Update loop index (required when connectNullData is true and there is
						//a sequence of empty sets.) Since we've already found the "next" defined
						//data, we update loop to that to optimize.
						i = nxt-1;
					}
				}
				//Now, we need to adjust the chart movie clip to 0,0 position as center
				chartMC._x = -(this.elements.canvas.w/2)-this.elements.canvas.x;
				chartMC._y = -(maxY)+((maxY-minY)/2);
				//Set the position of holder movie clip now
				holderMC._x = (this.elements.canvas.w/2)+this.elements.canvas.x;
				holderMC._y = (maxY)-((maxY-minY)/2);
				//Apply filter
				this.styleM.applyFilters(holderMC, this.objects.DATAPLOT);
				//Apply animation
				if (this.params.animation) {
					this.styleM.applyAnimation(holderMC, this.objects.DATAPLOT, this.macro, holderMC._x, 0, holderMC._y, 0, 100, 100, 100, null);
				}
				//Increment depth 
				depth++;
			}
		}
		//Clear interval    
		clearInterval(this.config.intervals.plot);
	}
	/**
	 * drawAnchors method draws the anchors on the chart
	*/
	private function drawAnchors():Void {
		//If the anchors are to be drawn
		if (this.params.drawAnchors) {
			//Variables
			var anchorMC:MovieClip;
			var depth:Number = this.dm.getDepth("ANCHORS");
			var i:Number, j:Number;
			//Create function storage containers for Delegate functions
			var fnRollOver:Function, fnClick:Function;
			//Iterate through all columns
			for (i=1; i<=this.numDS; i++) {
				for (j=1; j<=this.dataset[i].num; j++) {
					//If defined
					if (this.dataset[i].data[j].isDefined) {
						//Create an empty movie clip for this anchor
						anchorMC = this.cMC.createEmptyMovieClip("Anchor_"+i+"_"+j, depth);
						//Set the line style and fill
						anchorMC.lineStyle(this.dataset[i].anchorBorderThickness, parseInt(this.dataset[i].anchorBorderColor, 16), 100);
						anchorMC.beginFill(parseInt(this.dataset[i].anchorBgColor, 16), this.dataset[i].anchorBgAlpha);
						//Draw the polygon
						DrawingExt.drawPoly(anchorMC, 0, 0, this.dataset[i].anchorSides, this.dataset[i].anchorRadius, 90);
						//Set the x and y Position
						anchorMC._x = this.dataset[i].data[j].x;
						anchorMC._y = this.dataset[i].data[j].y;
						//Set the alpha of entire anchor
						anchorMC._alpha = this.dataset[i].anchorAlpha;
						//Apply animation
						if (this.params.animation) {
							this.styleM.applyAnimation(anchorMC, this.objects.ANCHORS, this.macro, anchorMC._x, 0, anchorMC._y, 0, this.dataset[i].anchorAlpha, 100, 100, null);
						}
						//Apply filters          
						this.styleM.applyFilters(anchorMC, this.objects.ANCHORS);
						//Event handlers for tool tip
						if (this.params.showToolTip) {
							//Create Delegate for roll over function columnOnRollOver
							fnRollOver = Delegate.create(this, dataOnRollOver);
							//Set the index
							fnRollOver.dsindex = i;
							fnRollOver.index = j;
							//Assing the delegates to movie clip handler
							anchorMC.onRollOver = fnRollOver;
							//Set roll out and mouse move too.
							anchorMC.onRollOut = anchorMC.onReleaseOutside=Delegate.create(this, dataOnRollOut);
						}
						//Click handler for links - only if link for this anchor has been defined and click URL     
						//has not been defined.
						if (this.dataset[i].data[j].link != "" && this.dataset[i].data[j].link != undefined && this.params.clickURL == "") {
							//Create delegate function
							fnClick = Delegate.create(this, dataOnClick);
							//Set index
							fnClick.dsindex = i;
							fnClick.index = j;
							//Assign
							anchorMC.onRelease = fnClick;
						} else {
							//Do not use hand cursor
							anchorMC.useHandCursor = (this.params.clickURL == "") ? false : true;
						}
						//Increase depth
						depth++;
					}
				}
			}
		}
		//Clear interval     
		clearInterval(this.config.intervals.anchors);
	}
	/**
	 * drawValues method draws the values on the chart.
	*/
	private function drawValues():Void {
		//Get value text style
		var valueStyleObj:Object = this.styleM.getTextStyle(this.objects.DATAVALUES);
		//Individual properties
		var isBold:Boolean = valueStyleObj.bold;
		var isItalic:Boolean = valueStyleObj.italic;
		var font:String = valueStyleObj.font;
		var angle:Number = 0;
		//Container object
		var valueObj:MovieClip;
		//Depth
		var depth:Number = this.dm.getDepth("DATAVALUES");
		//Loop var
		var i:Number, j:Number;
		var yPos:Number;
		var align:String, vAlign:String;
		////Iterate through all points
		for (i=1; i<=this.numDS; i++) {
			for (j=1; j<=this.dataset[i].num; j++) {
				//If defined and value is to be shown
				if (this.dataset[i].data[j].isDefined && this.dataset[i].data[j].showValue) {
					//For first point, we show the value on top
					vAlign = "top";
					yPos = this.dataset[i].data[j].y-this.params.valuePadding;				
					//Align position 
					align = "center";
					//Convey alignment to rendering object
					valueStyleObj.align = align;
					valueStyleObj.vAlign = vAlign;
					//Now, if the labels are to be rotated
					if (this.params.rotateValues) {
						valueStyleObj.bold = false;
						valueStyleObj.italic = false;
						valueStyleObj.font = _embeddedFont;
						angle = 270;
					} else {
						//Normal horizontal label - Store original properties
						valueStyleObj.bold = isBold;
						valueStyleObj.italic = isItalic;
						valueStyleObj.font = font;
						angle = 0;
					}
					valueObj = createText(false, this.dataset[i].data[j].displayValue, this.cMC, depth, this.dataset[i].data[j].x, yPos, angle, valueStyleObj, false, 0, 0);
					//Next, we adjust those labels are falling out of top canvas area
					if (((yPos-valueObj.height)<=this.elements.canvas.y)) {
						//Data value is colliding with the upper side of canvas. So we need to place it within
						//the area
						if (!this.params.rotateValues) {
							valueObj.tf._y = yPos+(2*this.params.valuePadding);
						} else {
							valueObj.tf._y = yPos+(2*this.params.valuePadding)+valueObj.height;
						}
					}
					//Now, we adjust those labels are falling out of bottom canvas area     
					if (((yPos+valueObj.height)>=this.elements.canvas.toY)) {
						//Data value is colliding with the lower side of canvas. So we need to place it within
						//the area
						if (!this.params.rotateValues) {
							valueObj.tf._y = yPos-(2*this.params.valuePadding)-valueObj.height;
						} else {
							valueObj.tf._y = yPos-(2*this.params.valuePadding);
						}
					}
					//Apply filter     
					this.styleM.applyFilters(valueObj.tf, this.objects.DATAVALUES);
					//Apply animation
					if (this.params.animation) {
						this.styleM.applyAnimation(valueObj.tf, this.objects.DATAVALUES, this.macro, valueObj.tf._x, 0, valueObj.tf._y, 0, 100, null, null, null);
					}
					//Increase depth     
					depth++;
				}
			}
		}
		//Clear interval
		clearInterval(this.config.intervals.dataValues);
	}
	/**
	 * drawFormBtn method draw a button and register event for XML generation
	*/
	private function drawFormBtn():Void{
		//Get the depth of the form button
		var depth:Number = this.dm.getDepth("FORMBUTTON");
		//Create a listener for the button
		var btnListener:Object = new Object();
		// Instantiate the form button object
		var btnForm:FCButton = new FCButton(this.cMC, depth);
		//Store the class reference
		var classRef:Object = this;
		var loadVar:LoadVars;
		//Register the listener
		btnListener.click = function(){
			if(classRef.params.submitDataAsXML) {
				classRef.config.strReturn = classRef.generateXML();
			}
			else {
				classRef.config.strReturn = classRef.generateCommaData();
			}
			loadVar = new LoadVars();
			loadVar.strXML = classRef.config.strReturn;
			loadVar.send(classRef.params.formAction, classRef.params.formTarget, classRef.params.formMethod);
		}
		//Set the parameters of the required button
		btnForm.setParams(this.params.formBtnTitle, this.elements.btn.x, this.elements.btn.y, this.elements.btn.h, this.elements.btn.w, 5, this.params.formBtnBgColor, this.params.formBtnBorderColor, "Verdana", this.params.btnTextColor, 10);
		//Draw the button
		btnForm.draw();
		//Show the button
		btnForm.show();
		//Register the event with the button
		btnForm.addEventListener("click", btnListener);
		//Add to stack
		this.addToListenerStk(btnForm, "click", btnListener);
		//Clear Interval
		clearInterval(this.config.intervals.formBtn);
	}
	/**
	 * drawLegend method renders the legend
	*/
	private function drawLegend():Void {
		if (this.params.showLegend) {
			this.lgnd.render();
			//Apply filter
			this.styleM.applyFilters(lgndMC, this.objects.LEGEND);
			//Apply animation
			if (this.params.animation) {
				this.styleM.applyAnimation(lgndMC, this.objects.LEGEND, this.macro, null, 0, null, 0, 100, null, null, null);
			}
		}
		//Clear interval 
		clearInterval(this.config.intervals.legend);
	}
	/**
	 * setContextMenu method sets the context menu for the chart.
	 * For this chart, the context items are "Print Chart".
	*/
	private function setContextMenu():Void {
		var chartMenu:ContextMenu = new ContextMenu();
		chartMenu.hideBuiltInItems();
		//Create a print chart contenxt menu item
		var printCMI:ContextMenuItem = new ContextMenuItem("Print Chart", Delegate.create(this, printChart));
		//Push print item.
		chartMenu.customItems.push(printCMI);
		if (this.params.imageSave){
			//Add the export to image option
			chartMenu.customItems.push(super.returnImageSaveMenuItem());		
		}
		if (this.params.showFCMenuItem){
			//Push "About FusionCharts" Menu Item
			chartMenu.customItems.push(super.returnAbtMenuItem());		
		}
		//Assign the menu to cMC movie clip
		this.cMC.menu = chartMenu;
	}
	/**
	 * generateSelectedDataList method generates the list of selected scatter points
	*/
	private function generateSelectedDataList():Void {
		//Position variables
		var posObj:Object;
		var x1:Number;
		var x2:Number;
		var y1:Number;
		var y2:Number;
		//Loop variables
		var i:Number;
		var j:Number;
		//Loop it to set the visibility false for all the select rectangles
		var _item:String;
		for (_item in this.selectRects) {
			//Get the bound of each selectionRect
			if(this.selectRects[_item] != null ) {
				//Get the position object from the selectRect class
				posObj = this.selectRects[_item].getBound();
				//Get the corner position of the rectangle
				x1 = Math.min(posObj.fromX, posObj.toX);
				x2 = Math.max(posObj.fromX, posObj.toX);
				y1 = Math.min(posObj.fromY, posObj.toY);
				y2 = Math.max(posObj.fromY, posObj.toY);
				//We now check which data lies within the selectable rectangle
				//We set the selection flag - so that we do not store same ID twice 
				for (i=1; i<=this.numDS; i++) {
					//Each data item within the dataset
					for (j=1; j<=this.dataset[i].num; j++) {
						if((this.dataset[i].data[j].x >= x1 && this.dataset[i].data[j].x <= x2 ) && (this.dataset[i].data[j].y >= y1 && this.dataset[i].data[j].y <= y2)  && !this.dataset[i].data[j].isSelected) {
							//Set the selection flag to true
							this.dataset[i].data[j].isSelected = true;
						}
					}
				}
			}
		}
	}
	/**
	 * generateXML method generate XML for the selected ID's
	*/
	private function generateXML():String {
		//This function returns the XML representation of the modified data
		//*** XML Generator ***//
		//Generate the <chart> element attributes
		var strXML:String = "<chart>";
		//Now, generate the categories elements
		strXML = strXML+"<categories>";
		for (var i:Number=1; i<=this.num; i++) {
			if (this.categories[i].label != undefined && this.categories[i].label != "") {
				strXML = strXML+"<category label='"+this.categories[i].label+"' x='"+this.categories[i].xv+"' />";
			}
		}
		//End the categories tag - <categories>
		strXML = strXML+"</categories>";
		//Generate the list of selected ID's
		this.generateSelectedDataList();		
		//--Now generate the Datasets
		for (i=1; i<=this.numDS; i++) {
			//Attach the attributes
			strXML = strXML+"<dataset id='"+this.dataset[i].id+"' seriesName='"+this.dataset[i].seriesName+"' >";
			//Data set generated
			//Now generate the data tags
			for (var j:Number=1; j<=this.num; j++) {
				//Now if the selected flag is ON we concatenate the point
				if(this.dataset[i].data[j].isSelected) {
					strXML = strXML+"<set id='"+this.dataset[i].data[j].id+"' x='"+this.dataset[i].data[j].xv+"' y='"+this.dataset[i].data[j].yv+"'/>";
					//Unset the flag
					this.dataset[i].data[j].isSelected = false;
				} 
			}
			//End data set
			strXML = strXML+"</dataset>";
		}
		//End the chart tag
		strXML = strXML+"</chart>";
		return (strXML.toString());
	}
	/**
	 * generateArrData method generate Data Array for the selected ID's
	*/
	private function generateArrData():Array {
		//Loop Variables
		var i:Number;
		var j:Number;
		var counter:Number=0;
		var index:Number = 0;
		//Flag -  to indicate the first set of the dataitem
		var flag:Boolean = false;
		//Generate the list of selected ID's
		this.generateSelectedDataList();		
		//We now create arr data - which contains all the selected id's
		//String which holds the selected id's
		this.config.strReturn = new Array();
		//Based on the flag we set in the above loop
		for (i=1; i<=this.numDS; i++) {
			flag = true;
			counter = 1;
			//Each data item within the dataset
			for (j=1; j<=this.dataset[i].num; j++) {
				if(this.dataset[i].data[j].isSelected) {
					if(flag) {
						//Create 2 dimensional Array once and store the dataset ID as the first item
						this.config.strReturn[index] = new Array();
						//Store the dataset ID
						this.config.strReturn[index][0] = this.dataset[i].id;
						//Make the flag false as we stored the dataset id once
						flag = false;
						//Store the next dataset
						index++;
					}
					this.config.strReturn[index-1][counter++] = this.dataset[i].data[j].id;
					//Set the selection flag to true
					this.dataset[i].data[j].isSelected = false;
				}
			}
		}
		return this.config.strReturn;
	}
	/**
	 * generateCommaData method generate Data for the selected ID's seperated by Comma character
	*/
	private function generateCommaData():String {
		//Loop Variables
		var i:Number;
		var j:Number;
		//Flag -  to indicate the first set of the dataSet
		var flag:Boolean = false;
		//Generate the list of selected ID's
		this.generateSelectedDataList();		
		//We now create arr data - which contains all the selected id's
		var strReturn:String=""; 
		//Based on the flag we set in the above loop
		for (i=1; i<=this.numDS; i++) {
			flag = true;
			//Each data item within the dataset
			for (j=1; j<=this.dataset[i].num; j++) {
					if(flag) {
						if(i!=1) {
							strReturn += ("|");
						}
						strReturn += (this.dataset[i].id+",");
						flag = false;
					}
					//Only if the dataitem's is selected
					if(this.dataset[i].data[j].isSelected) {
						//Add the dataitem id's
						strReturn += (this.dataset[i].data[j].id+",");
						//Set the selection flag to true
						this.dataset[i].data[j].isSelected = false;
					}
			}
			//Delete the last comma
			strReturn = strReturn.substr(0, strReturn.length-1);
		}
		return(strReturn);
	}
	// -------------------- EVENT HANDLERS --------------------//
	/**
	 * returnArray method returns the updated Data in an Array format
	*/
	public function returnArray():Array{
		//This function returns an Array representation of the modified data
		//*** ARRAY OF DATA ***//
		return (this.config.strReturn);
	}
	/**
	 * handlerOnMouseDown is the delegat-ed event handler method that'll
	 * be invoked when the user Presses his mouse over the canvas. 
	*/
	private function handlerOnMouseDown():Void {
		//Increase the counter 
		this.params.numRects++;
		this.config.depthIterator++;
		//Movieclip reference to the handlerMC
		var handlerMC:MovieClip = arguments.caller.mc;
		//Get the depth at which we draw the rectangle
		var depth:Number = this.dm.getDepth("SELECTIONRECTANGLE")+this.config.depthIterator;
		//Now register the listener
		this.rectListener.onRectDelete = Delegate.create(this, onRectDelete);
		//Now register the listener
		this.RHListener.onRectRHSet = Delegate.create(this, onRectRHSet);
		//Create the empty MC for the rectangle
		var mc:MovieClip = this.cMC.createEmptyMovieClip("SRect_"+depth, depth);
		//Create an object of the rectangle
		var sRect:SelectRect = new SelectRect(this.cMC, mc, "R"+this.config.depthIterator, this.elements.canvas.x, this.elements.canvas.y, this.elements.canvas.w, this.elements.canvas.h, 0);
		//Add listener to the class object
		sRect.addEventListener("onRectDelete", rectListener);
		sRect.addEventListener("onRectRHSet", RHListener);
		//Add to stack
		this.addToListenerStk(sRect, "onRectDelete", rectListener);
		//Add to stack
		this.addToListenerStk(sRect, "onRectRHSet", RHListener);
		//Store the reference of the object
		this.selectRects["R"+this.config.depthIterator] = sRect;
		//Set the initial paramters for the selectable rectangle
		sRect.setParams(this.params.selectFillColor, this.params.selectFillAlpha, this.params.selectBorderColor, 0, this.params.selectBorderAlpha);
		//Set the visibility to true
		sRect.show();
		//Hide the handlers for all the other Rectangles
		this.hideAllHandlers("R"+this.config.depthIterator);
		//Set the initial position of the rectangle as the current mouse position 
		sRect.setInitialPos(this.cMC._xmouse, this.cMC._ymouse);
		//Draw the rectangle and register the onMouseMove, onPress and onRelease events of the rectangle
		sRect.draw();
		//Clear garbage
		delete sRect;
	}
	/**
	 * handlerOnUp is the delegat-ed event handler method that'll
	 * be invoked when the user releases his mouse over the canvas.
	 * this method is executed only if the mouse down event has been
	 * executed properly.
	*/
	private function handlerOnMouseUp():Void {
		this.selectRects["R"+this.config.depthIterator].fnOnMouseUp();
	}
	/**
	 * onRectDelete is the delegat-ed event handler method that'll
	 * be invoked when the user deletes a particular rectangle using 
	 * context menu item.
	*/
	private function onRectDelete(evtObj):Void {
		if(this.params.numRects	>0) {	
			this.selectRects[evtObj.index].destroy();
			this.selectRects[evtObj.index] = null;
			this.params.numRects--;
		}
	}
	/**
	 * onRectRHSet is the delegat-ed event handler method that'll
	 * be invoked when the user sets the resize handler for any rectangle
	 * using the menu item.
	*/
	private function onRectRHSet(evtObj):Void {
		this.hideAllHandlers(evtObj.index);
	}
	/**
	 * dataOnRollOver is the delegat-ed event handler method that'll
	 * be invoked when the user rolls his mouse over an anchor. 
	 * This function is invoked, only if the tool tip is to be shown.
	 * Here, we show the tool tip.
	*/
	private function dataOnRollOver():Void {
		//Index of data is stored in arguments.caller.index
		var dsindex:Number = arguments.caller.dsindex;
		var index:Number = arguments.caller.index;
		//Set tool tip text
		this.tTip.setText(this.dataset[dsindex].data[index].toolText);
		//Show the tool tip
		this.tTip.show();
	}
	/**
	 * dataOnRollOut method is invoked when the mouse rolls out
	 * of anchor. We just hide the tool tip here.
	*/
	private function dataOnRollOut():Void {
		//Hide the tool tip
		this.tTip.hide();
	}
	/**
	 * dataOnClick is invoked when the user clicks on a anchor (if link
	 * has been defined). We invoke the required link.														  
	*/
	private function dataOnClick():Void {
		//Index of column is stored in arguments.caller.index
		var dsindex:Number = arguments.caller.dsindex;
		var index:Number = arguments.caller.index;
		//Invoke the link
		super.invokeLink(this.dataset[dsindex].data[index].link);
	}
	/**
	 * addToListenerStk method adds listeners to stack. These listeners have to  
	 * be deleted from memory  for efficiency purpose.
	 *	@param	obj		Object which needs to be added to stack list
	 *	@param	type	type of event
	 *	@param	lHandler	listener reference which needs to be removed
	*/
	public function addToListenerStk(obj:Object, type:String, lHandler:Object):Void {
		//Add it to stack
		//We store all the properties of the listener - so as to make sure we remove the 
		// specific listner and not unnecessary listeners
		this.config.stkListener[this.config.stkListenerLength++] = new Object();
		this.config.stkListener[this.config.stkListenerLength-1].obj = obj;
		this.config.stkListener[this.config.stkListenerLength-1].lType = type;
		this.config.stkListener[this.config.stkListenerLength-1].lHandler = lHandler;
	}
	/**
	 * reInit method re-initializes the chart. This method is basically called
	 * when the user changes chart data through JavaScript. In that case, we need
	 * to re-initialize the chart, set new XML data and again render.
	*/
	public function reInit():Void {
		//Invoke super class's reInit
		super.reInit();
		//Remove all the listeners
		while (this.config.stkListenerLength > 0) {
			this.config.stkListener[this.config.stkListenerLength].obj.removeEventListener(this.config.stkListener[this.config.stkListenerLength].lType, this.config.stkListener[this.config.stkListenerLength].lHandler);
			this.config.stkListenerLength--;
		}
		//Reinitialize the stack array and set length to 0
		this.config.stkListener = new Array();
		this.config.stkListenerLength =0;
		//Configuration whether we've to draw any line
		this.config.drawLine = false;
		//Array which holds the selected id's
		this.config.strReturn = new Array();
		//Iterator to hold the number of rectangles drawn
		this.config.depthIterator = 0;
		//Create select rectangle array
		this.selectRects = new Array();
		//Initialize the listener
		this.rectListener = new Object();
		this.RHListener = new Object();
	}
	/**
	 * remove method removes the chart by clearing the chart movie clip
	 * and removing any listeners. 
	*/
	public function remove():Void {
		super.remove();
	}
}

