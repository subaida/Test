<?xml version="1.0" encoding="iso-8859-1"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>FusionMaps Documentation</title>
<link rel="stylesheet" type="text/css" href="Style.css" />
</head>

<body>
<table width="98%" border="0" cellspacing="0" cellpadding="3" align="center">
  <tr> 
    <td><h2 class="pageHeader">FusionMaps with ASP.NET (C#) &gt; Plotting Data from Database &gt; USMap </h2></td>
  </tr>
  
  <tr> 
    <td valign="top" class="text">In this page we will see the code used to achieve the Goal 1. Below is the important part of the code. </td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="highlightBlock">Before moving further with the process of plotting data from database, we recommend to go through &quot;Using dataXML Method&quot; and &quot;Using dataXML Method&quot; to know the basics about FusionMap generation procedure. </td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="highlightBlock">The code discussed here is present in <span class="codeInline">Download Package &gt; Code &gt; CS_NET &gt; DrillDown  </span> folder. </td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="text">The code to create the US map and plot data from database contained in <span class="codeInline">Default.aspx</span> is listed as under : </td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="codeBlock"><p>&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;Default.aspx.cs&quot; Inherits=&quot;FusionMapsDBExample_DrillDown&quot; %&gt;</p>
        <p>&lt;html&gt;<br />
          &nbsp; &nbsp; &lt;head&gt;<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;title&gt;FusionMaps v3 - Database Example&lt;/title&gt;<br /> 
 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;script language=&quot;Javascript&quot; src=&quot;../JSClass/FusionMaps.js&quot;&gt;&lt;/script&gt;<br />
 &nbsp;&nbsp;&nbsp; &lt;/head&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;body&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &lt;form id='form1' name='form1' method='post' runat=&quot;server&quot;&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;% <span class="codeComment">// Show USA Map</span> %&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>&nbsp;&nbsp;&nbsp; &lt;asp:Literal ID=&quot;USMap&quot; runat=&quot;server&quot; /&gt;</strong><br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/form&gt;<br />
&nbsp;&nbsp; &nbsp; &lt;/body&gt;<br />
&lt;/html&gt;        </p>      </td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="text">In the above code, we first include <span class="codeInline">FusionMaps.j</span>s file to enable us embed the map using   JavaScript. The USA map loads in Literal USMap through the following code behind script (<span class="codeInline">Default.aspx.cs</span>).</td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  
  <tr class="codeBlock">
    <td valign="top" class="text"><p class="codeBlock">using System;<br />
      using System.Data;<br />
      using System.Configuration;<br />
      using System.Collections;<br />
      using System.Web;<br />
      using System.Web.Security;<br />
      using System.Web.UI;<br />
      using System.Web.UI.WebControls;<br />
      using System.Web.UI.WebControls.WebParts;<br />
      using System.Web.UI.HtmlControls;<br />
      using InfoSoftGlobal;<br />
      <br />
      public partial class FusionMapsDBExample_DrillDown : System.Web.UI.Page<br />
        {<br />
       &nbsp;&nbsp; protected void Page_Load(object sender, EventArgs e)<br />
       &nbsp;&nbsp; {<br />
       <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Define dataURL variable</span><br />
        <span class="codeComment"> &nbsp;&nbsp; &nbsp;&nbsp; // URLencode dataURL</span><br />
&nbsp;&nbsp; <span class="codeComment">&nbsp;&nbsp; </span>string dataURL = Server.UrlEncode(&quot;DataGen.aspx?op=GetUSMapDetails&quot;);<br />
<br />
<span class="codeComment">&nbsp;&nbsp; </span>&nbsp;&nbsp; <span class="codeComment">// Create the Map with data contained in dataURL <br />
&nbsp;&nbsp; &nbsp;&nbsp; // and embed the chart rendered as HTML into Literal - USMap<br />
&nbsp;&nbsp; &nbsp;&nbsp; // We use FusionMaps class of InfoSoftGlobal namespace (FusionMaps.dll in BIN folder)<br />
&nbsp;&nbsp; &nbsp;&nbsp; // RenderMap() generates the necessary HTML needed to render the map</span><br />
       <span class="codeComment">&nbsp;&nbsp; </span>&nbsp;&nbsp; string mapHTML=<strong>FusionMaps.RenderMap(&quot;../Maps/FCMap_USA.swf&quot;, dataURL, &quot;&quot;, &quot;mapid&quot;, &quot;600&quot;, &quot;400&quot;, false, false);</strong><br />
&nbsp;&nbsp; <br />
       <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; ' embed the chart rendered as HTML into Literal - USMap</span><br />
       <span class="codeComment">&nbsp;&nbsp; </span>&nbsp;&nbsp; USMap.Text = mapHTML;<br />
       <br />
&nbsp;&nbsp; }<br />
     }</p>      </td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="text"><p>In the above code we do the following : </p>
        <ul>
            <li>We create a dataURL to fetch map XML from <span class="codeInline">DataGen.aspx (whose code behind page is DataGen.aspx.cs)</span>. </li>
            <li>We call <span class="codeInline">renderMap</span>() function from <span class="codeInline">FusionMaps </span>of <span class="codeInline">InfosoftGlobal </span>assembly class&nbsp; which renders map of USA after passing the dataURL to it. </li>
        </ul></td>
  </tr>
  
  <tr>
    <td valign="top" class="text">Let's now go thorough the code of <span class="codeInline">DataGen.aspx</span>.cs that fetches data and forms map XML. </td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="codeBlock"><p>using System;<br />
        using System.Configuration;<br />
        using System.Collections;<br />
        using System.Web;<br />
        using System.Web.Security;<br />
        using System.Web.UI;<br />
        using System.Web.UI.WebControls;<br />
        using System.Web.UI.WebControls.WebParts;<br />
        using System.Web.UI.HtmlControls;<br />
        using System.Text;<br />
        <span class="codeComment">// contains the connection parameters to connect to database. </span><br />
        <strong>using DataConnection;</strong> <br />
</p>
          <p>public partial class DrillDown_dataGen : System.Web.UI.Page<br />
            {<br />
            <span class="codeComment">&nbsp;&nbsp; ///&lt;summary&gt;<br />
            &nbsp;&nbsp; /// This program calls diffarent fucntions according to the value of op<br />
            &nbsp;&nbsp; /// op is passed as Request<br />
            &nbsp;&nbsp; /// The functions generate XML and relay to map/chart using dataURL method<br />
            &nbsp;&nbsp; ///&lt;/summary&gt;</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span>protected void Page_Load(object sender, EventArgs e)<br />
            <span class="codeComment">&nbsp;&nbsp; </span>{<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>string op;<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>op = Request[&quot;op&quot;];<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Depending on op we call function</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>switch (op)<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>{<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>case &quot;GetUSMapDetails&quot;:<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; </span>GetUSMapDetails();  <span class="codeComment">// Call GetUSMapDetails</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>break;<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>case &quot;GetStateDetails&quot;:<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>GetStateDetails();<span class="codeComment">  //Call GetStateDetails</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>break;<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>case &quot;getChartEmpStat&quot;:<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>getChartEmpStat();  <span class="codeComment">//Call getChartEmpStat</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>break;<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>}<br />
            <span class="codeComment">&nbsp;&nbsp; </span>}</p>
          <p> <span class="codeComment">&nbsp;&nbsp;  /// &lt;summary&gt;<br />
          &nbsp;&nbsp; /// This program creates XML for USA Map to show polulation % of each state<br />
          &nbsp;&nbsp; /// &lt;/summary&gt;</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span>public void GetUSMapDetails()<br />
            <span class="codeComment">&nbsp;&nbsp; </span>{</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; /*<br />
          &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; In this example, we show how to connect FusionMaps to a database.<br />
          &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; You can connect to any database. Here, we've shown MSSQL/Access.<br />
          &nbsp;&nbsp; &nbsp;&nbsp; */</span><br />
          <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">//strXML will be used to store the entire XML document generated</span><br />
          <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>StringBuilder strXML = new StringBuilder();</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Variable to store SQL Queries</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>string strQuery;<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Variable to store total Population</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>double sumdata;</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Generate the map element <br />
  &nbsp;&nbsp; &nbsp;&nbsp; //Create the opening &lt;map&gt; element and add the attributes that we need.</span><br />
        <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;map borderColor='FFFFFF' fillAlpha='80' showBevel='0' numberSuffix='% of total US population' legendBorderColor='F1f1f1' hoverColor='FFFFFF' legendPosition='bottom'&gt;&quot;);</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Define color ranges</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;colorRange&gt;&quot;);<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;color minValue='0' maxValue='0.50' displayValue='0% to 0.50% of total' color='D64646' /&gt;&quot;);<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;color minValue='0.50' maxValue='1' displayValue='0.50% to 1% of total' color='F6BD0F' /&gt;&quot;);<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;color minValue='1' maxValue='3' displayValue='1% to 3% of total' color='8BBA00' /&gt;&quot;);<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;color minValue='3' maxValue='10' displayValue='3% or above of total' color='AFD8F8' /&gt;&quot;);<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;/colorRange&gt;&quot;);<br />
            <br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //store the sql query<br />
            &nbsp;&nbsp; &nbsp;&nbsp; //create the datareader object to connect to table</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strQuery = &quot;select sum(data) as datap from fcmap_distribution&quot;;<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>DbConn Rs = new DbConn(strQuery);</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Initialize sum container</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>sumdata = 0;<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>if (Rs.ReadData.HasRows == true)<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>{   <br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">// read first record</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>Rs.ReadData.Read();<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; // Store sum </span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>sumdata = Convert.ToDouble(Rs.ReadData[&quot;datap&quot;]);<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>}<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //close the reader </span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>Rs.ReadData.Close();</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Fetch all Internal id and data sum </span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strQuery = &quot;select  Internal_Id, (sum(data) / &quot; + sumdata + &quot;)*100  as datap from fcmap_distribution group by Internal_Id&quot;;</p>
          <p> <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>DbConn Rs1 = new DbConn(strQuery);</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Add map data element</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;data&gt;&quot;);<br />
  <br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //Check if we've records to show</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>if (Rs1.ReadData.HasRows == true)<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>{</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; //Iterate throuth the database</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>while (Rs1.ReadData.Read())<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>{<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; // Create query string</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strQuery = &quot;select map_swf from fcmap_master where Internal_Id='&quot; + Rs1.ReadData[&quot;Internal_Id&quot;].ToString() + &quot;'&quot;;<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; // Open fcmap_master table to get map swf names </span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>DbConn Rs2 = new DbConn(strQuery);<br />
            <br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; //  Read first record</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>Rs2.ReadData.Read();</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; // The link will in format StateDetails.aspx?Internal_Id=Int_Id&amp;map=map_swf.swf - we'll need to URL Encode this link to convert &amp; to %26 (or manually add it as %26 instead of &amp;)</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>string LinkURL = Server.UrlEncode(&quot;StateDetails.aspx?Internal_Id=&quot; + Rs1.ReadData[&quot;Internal_Id&quot;].ToString() + &quot;&amp;map=&quot; + Rs2.ReadData[&quot;map_swf&quot;].ToString());<br />
  <br />
  <br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; // Generate &lt;entity id=&quot;..&quot; value=&quot;..&quot; /&gt; and also add link to it </span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.AppendFormat(&quot;&lt;entity id='{0}' value='{1}' link='{2}' /&gt;&quot;, Rs1.ReadData[&quot;Internal_Id&quot;].ToString(), Math.Round(Convert.ToDouble(Rs1.ReadData[&quot;datap&quot;]), 2), LinkURL);</p>
          <p> <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>Rs2.ReadData.Close();<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>}<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>}</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Close reader </span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>Rs1.ReadData.Close();</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Finally, close &lt;map&gt; element and add</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;/data&gt;&quot;);</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // If needed, you can append additional XML tags here - like STYLE or MARKERS</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;styles&gt;&lt;definition&gt;&lt;style type='animation' name='animX' param='_xscale' start='0' duration='1' /&gt;&lt;style type='animation' name='animY' param='_yscale' start='0' duration='1' /&gt;&lt;style type='animation' name='animAlpha' param='_alpha' start='0' duration='1' /&gt;&lt;style type='shadow' name='myShadow' color='FFFFFF' distance='1' /&gt;&lt;/definition&gt;&quot;);<br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;application&gt;&lt;apply toObject='PLOT' styles='animX,animY' /&gt;&lt;apply toObject='LABELS' styles='myShadow,animAlpha' /&gt;&lt;/application&gt;&lt;/styles&gt;&quot;);<br />
  <br />
  <br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Close Map element</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.Append(&quot;&lt;/map&gt;&quot;);</p>
          <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Set Proper output content-type</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>Response.ContentType = &quot;text/xml&quot;;<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Just write out the XML data<br />
            &nbsp;&nbsp; &nbsp;&nbsp; // NOTE THAT THIS PAGE DOESN'T CONTAIN ANY HTML TAG, WHATSOEVER</span><br />
            <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>Response.Write(strXML.ToString());</p>
          <p> <span class="codeComment">&nbsp;&nbsp; </span>}<br />
          </p>
          <p>...</p>
          <p>}</p></td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="text">Lets discuss the steps involded in the above code :</td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="text">The first part of the code is executed when the page is loaded : </td>
  </tr>
  <tr>
      <td valign="top" class="codeBlock"><p>protected void Page_Load(object sender, EventArgs e)<br />
{<br />
<span class="codeComment">&nbsp;&nbsp; </span>string op;<br />
<span class="codeComment">&nbsp;&nbsp; </span>op = Request[&quot;op&quot;];<br />
<span class="codeComment">&nbsp;&nbsp; //Depending on op we call function</span><br />
<span class="codeComment">&nbsp;&nbsp; </span>switch (op)<br />
<span class="codeComment">&nbsp;&nbsp; </span>{<br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>case &quot;<strong>GetUSMapDetails</strong>&quot;:<br />
<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; </span><strong>GetUSMapDetails()</strong>; <span class="codeComment">// Call GetUSMapDetails</span><br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>break;<br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>case &quot;GetStateDetails&quot;:<br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>GetStateDetails();<span class="codeComment"> //Call GetStateDetails</span><br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>break;<br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>case &quot;getChartEmpStat&quot;:<br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>getChartEmpStat(); <span class="codeComment">//Call getChartEmpStat</span><br />
<span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>break;<br />
<span class="codeComment">&nbsp;&nbsp; </span>}<br />
}<br />
      </p>    </td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="text">The file <span class="codeInline">getDetails.aspx</span> is passed a querystring - <span class="codeInline">?op=GetUSMapDetails</span>. The above code retrieves this querystring value in variable -<span class="codeInline">op</span>. Depending on the value of <span class="codeInline">op </span>the code calls related functions using <span class="codeInline">switch case</span> statement. Hence, when op's value is <span class="codeInline">GetUSMapDetails</span>, it calls <span class="codeInline">GetUSMapDetails</span>() function, which in turn builds and returns the US map XML as dataURL.</td>
  </tr>
  
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="text">Now,  we will dive deep into  the <span class="codeInline">GetUSMapDetails</span>() function. </td>
  </tr>
  
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  
  
  <tr>
    <td valign="top" class="text"><ul>
      <li>We create   <span class="codeInline">a StringBuilder </span>object <span class="codeInline">- strXML</span> (to store XML data) and <span class="codeInline">sumdata </span>to store sum of values from database.&nbsp; We also opened the root <span class="codeInline">map</span> element providing the map properties.</li>
    </ul></td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock">strXML.Append(&quot;&lt;map borderColor='FFFFFF' fillAlpha='80' showBevel='0' numberSuffix='% of total US population' legendBorderColor='F1f1f1' hoverColor='FFFFFF' legendPosition='bottom'&gt;&quot;);</td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="text"><ul>
      <li>Next,&nbsp; we define color range for the main US Map. </li>
    </ul></td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock"><span class="codeComment">//Define color ranges</span><br />
      strXML.Append(&quot;&lt;colorRange&gt;&quot;);<br />
      <br />
      strXML.Append(&quot;&lt;color minValue='0' maxValue='0.50' displayValue='0% to 0.50% of total' color='D64646' /&gt;&quot;);<br />
      <br />
      strXML.Append(&quot;&lt;color minValue='0.50' maxValue='1' displayValue='0.50% to 1% of total' color='F6BD0F' /&gt;&quot;);<br />
      <br />
      strXML.Append(&quot;&lt;color minValue='1' maxValue='3' displayValue='1% to 3% of total' color='8BBA00' /&gt;&quot;);<br />
      <br />
      strXML.Append(&quot;&lt;color minValue='3' maxValue='10' displayValue='3% or above of total' color='AFD8F8' /&gt;&quot;);<br />
      <br />
    strXML.Append(&quot;&lt;/colorRange&gt;&quot;);</td>
  </tr>
  <tr>
    <td valign="top" class="textBold">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="textBold">Providing data</td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="highlightBlock">To connect to database we have creatred a namespace <span class="codeInline"> <a href="#DataConn" class="codeInline">DataConnection</a></span> (file <span class="codeInline">DbHelper.vb</span> in <span class="codeInline">App_Code</span> folder). This contains a class <span class="codeInline">DbConn</span>, which we would using  to connect to database in this example and subsequent example(s). </td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="text"><ul>
      <li>We had included <span class="codeInline"><a href="#DataConn" class="codeInline">DataConnection</a></span> namespace in the header of the code page. <a href="#DataConn" class="codeInline">DataConnection</a> contains the connection parameters to   connect to database. </li>
    </ul>    </td>
  </tr>
  
  <tr>
    <td valign="top" class="text"><ul>
      <li>Here comes the database mining part where we start fetching data. </li>
      <UL>
        <li>First we initialize <span class="codeInline">sumdata</span> to store sum total of all data found in the table - <span class="codeInline">fcmap_distribution</span>. That represents the total US population (ficticious of-course). We did this using SQL Query : <span class="codeInline">&quot;select sum(data) as datap from fcmap_distribution&quot;</span>. </li>
        <li>Next, we fetch<span class="codeInline"> internal ID</span> of each entity/state of US map and get the percentage of population of each entity/state against total US population. This is stored in data reader <span class="codeInline">aReader1</span> using the SQL query - <span class="codeInline">&quot;select Internal_Id, (sum(data) / &quot; + sumdata + &quot;)*100 as datap from fcmap_distribution group by Internal_Id&quot;</span>. We again used <span class="codeInline">fcmap_distribution </span>table here. </li>
        <li>We get total population of each state and divide it by sum total US population and multiply it with 100 to get the percentage value. </li>
      </UL>
	  <li>Now we iterate through each record in the data reader and create <span class="codeInline">entity </span>element for each state. </li>
    </ul>    </td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock"><p><span class="codeComment">//store the sql query<br />
//create the datareader object to connect to table</span><br />
strQuery = &quot;select sum(data) as datap from fcmap_distribution&quot;;<br />
DbConn Rs = new DbConn(strQuery);</p>
      <p> <span class="codeComment">//Initialize sum container</span><br />
      sumdata = 0;<br />
      if (Rs.ReadData.HasRows == true)<br />
      { <br />
      <span class="codeComment">&nbsp;&nbsp; /</span><span class="codeComment">/ read first record</span><br />
      <span class="codeComment">&nbsp;&nbsp; </span>Rs.ReadData.Read();<br />
          <span class="codeComment">&nbsp;&nbsp; // Store sum </span><br />
        <span class="codeComment">&nbsp;&nbsp; </span>sumdata = Convert.ToDouble(Rs.ReadData[&quot;datap&quot;]);<br />
        }<br />
          <span class="codeComment"><br />
        //close the reader </span><br />
      <span class="codeComment"></span>Rs.ReadData.Close();<br />
      <br />
      <span class="codeComment">//Fetch all Internal id and data sum </span><br />
      strQuery = &quot;select  Internal_Id, (sum(data) / &quot; + sumdata + &quot;)*100  as datap from fcmap_distribution group by Internal_Id&quot;;</p>
      <p>DbConn Rs1 = new DbConn(strQuery);</p>
      <p> <span class="codeComment">// Add map data element</span><br />
        strXML.Append(&quot;&lt;data&gt;&quot;);<br />
          <br />
          <span class="codeComment">//Check if we've records to show</span><br />
          if (Rs1.ReadData.HasRows == true)<br />
        {<br />
        <span class="codeComment">&nbsp;&nbsp; //Iterate throuth the database</span><br />
        <span class="codeComment">&nbsp;&nbsp; </span>while (Rs1.ReadData.Read())<br />
        <span class="codeComment">&nbsp;&nbsp; </span>{<br />
        <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Create query string</span><br />
        <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; </span>strQuery = &quot;select map_swf from fcmap_master where Internal_Id='&quot; + Rs1.ReadData[&quot;Internal_Id&quot;].ToString() + &quot;'&quot;;<br />
        <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // Open fcmap_master table to get map swf names </span><br />
        <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; </span>DbConn Rs2 = new DbConn(strQuery);<br />
        <br />
        <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; //  Read first record</span><br />
        <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; </span>Rs2.ReadData.Read();</p>
      <p> <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp; // The link will in format StateDetails.aspx?Internal_Id=Int_Id&amp;map=map_swf.swf - we'll need to URL Encode this link to convert &amp; to %26 (or manually add it as %26 instead of &amp;)</span><br />
          <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;</span><span class="codeComment"> </span>string LinkURL = Server.UrlEncode(&quot;StateDetails.aspx?Internal_Id=&quot; + Rs1.ReadData[&quot;Internal_Id&quot;].ToString() + &quot;&amp;map=&quot; + Rs2.ReadData[&quot;map_swf&quot;].ToString());<br />
          <br />
          <span class="codeComment">&nbsp; &nbsp; &nbsp; // Generate &lt;entity id=&quot;..&quot; value=&quot;..&quot; /&gt; and also add link to it </span><br />
       <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp; </span>strXML.AppendFormat(&quot;&lt;entity id='{0}' value='{1}' link='{2}' /&gt;&quot;, Rs1.ReadData[&quot;Internal_Id&quot;].ToString(), Math.Round(Convert.ToDouble(Rs1.ReadData[&quot;datap&quot;]), 2), LinkURL);</p>
      <p> <span class="codeComment">&nbsp;&nbsp; </span><span class="codeComment">&nbsp;&nbsp;</span><span class="codeComment">&nbsp;</span>Rs2.ReadData.Close();<br />
          <span class="codeComment">&nbsp;&nbsp; </span>}<br />
          }</p>
      <p> <span class="codeComment">// Close reader </span><br />
      Rs1.ReadData.Close();</p>
      <p> <span class="codeComment">// Finally, close &lt;map&gt; element and add</span><br />
      strXML.Append(&quot;&lt;/data&gt;&quot;);</p>    </td>
  </tr>
  <tr>
    <td valign="top" class="text"><ul>
      <UL><UL>
        <LI>Here we extract <span class="codeInline">internalID</span> from <span class="codeInline">Rs1.ReadData[&quot;Internal_Id&quot;] </span>and set  to <span class="codeInline">id</span> attribute.</li>
        <LI>We get percentage of population of the state against total US population from <span class="codeInline">Math.Round(Convert.ToDouble(Rs1.ReadData[&quot;datap&quot;]), 2)</span> and set to <span class="codeInline">value </span>attribute. We set the dacimal limit of the value to 2 places using ASP.NET function <span class="codeInline">Math.Round(). </span></li>
        </UL></UL>
    </ul></td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="textBold">Setting up the Links</td>
  </tr>
  <tr>
    <td valign="top" class="text"><p>We also set up drill-down link to each entity. Each enity on click will drill down to another aspx file. This we did in the entity entry itself as shown above using <span class="codeInline">link </span>attribute. Let's see the how the link is structured.<br />
      </p>
      <p class="codeInline">...string LinkURL = Server.UrlEncode(&quot;StateDetails.aspx?Internal_Id=&quot; + Rs1.ReadData[&quot;Internal_Id&quot;].ToString() + &quot;&amp;map=&quot; + Rs2.ReadData[&quot;map_swf&quot;].ToString());      </p>
      <ul>
        <li class="text">All states/entities will drill-down to <span class="codeInline">StateDetails.aspx</span> page. </li>
        <li class="text">Each entity will pass a query string variable - <span class="codeInline">Internal_Id</span> whose value will be the internal id of that state. This is extracted out from the&quot;<span class="codeInline">Internal_id</span>&quot; field of the iterated record.</li>
        <li class="text">Each entity will also pass the map file name to <span class="codeInline">Detailed.asp</span> page using querystirng variable -<span class="codeInline">map</span>. Note that another data reader <span class="codeInline">Rs2</span> is created for each iteration which stores the map file name of the releted Internal_Id in &quot;<span class="codeInline">map_swf</span>&quot;&nbsp; field. Data reader <span class="codeInline">Rs2</span> is created from table <span class="codeInline">fcmap_master</span> using SQL query - <span class="codeInline">&quot;select map_swf from fcmap_master where Internal_Id='&quot; + Rs1.ReadData[&quot;Internal_Id&quot;].ToString() + &quot;'&quot;. </span></li>
    </ul></td>
  </tr>
  
  <tr>
    <td valign="top" class="text">Thus all entities are created.</td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="text"><ul>
              <li>Next we add styles like <span class="codeInline">XScale, YScale, alpha</span> &amp; <span class="codeInline">shadow</span> styles to the map using <span class="codeInline">&lt;styles&gt;</span> element. </li>
          <li>Finally we return the XML as dataURL to <span class="codeInline">renderMap()</span> function in <span class="codeInline">Default.aspx.cs</span><span class="codeInline"></span>..</li>
      </ul></td>
  </tr>
  
  <tr>
    <td valign="top" class="codeBlock"><span class="codeComment">// Set Proper output content-type</span><br />
Response.ContentType = &quot;text/xml&quot;;<br />
<br />
<span class="codeComment">// Just write out the XML data<br />
// NOTE THAT THIS PAGE DOESN'T CONTAIN ANY HTML TAG, WHATSOEVER</span><br />
Response.Write(strXML.ToString());</td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
      <td valign="top" class="text">The above mentioned <span class="codeInline">renderMap()</span> function (in <span class="codeInline">Default.aspx.cs</span>)  renders the map retrieving the XML and set it to literal control USMap. </td>
  </tr>
  <tr>
      <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="codeBlock">string mapHTML=<strong>FusionMaps.RenderMap(&quot;../Maps/FCMap_USA.swf&quot;, dataURL, &quot;&quot;, &quot;mapid&quot;, &quot;600&quot;, &quot;400&quot;, false, false);</strong><br />
&nbsp;&nbsp; <br />
<span class="codeComment">' embed the chart rendered as HTML into Literal - USMap</span><br />USMap.Text = mapHTML;</td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" class="text">Here is the screenshot of the US map that we just created extracting data from database. </td>
  </tr>
  <tr> 
    <td valign="top" class="text"><img src="Images/CodeASPDB1.jpg" width="737" height="518" class="imageBorder" /></td>
  </tr>
  <tr>
    <td valign="top" class="text">&nbsp;</td>
  </tr>
  <tr>
    <td valign="top" >
	<table cellspacing="0" cellpadding="0" class="text">
      <tr>
        <td valign="top" class="header"><a name="DataConn" class="header" id="DataConn">Inside DataConnection Namespace</a> </td>
      </tr>
      <tr>
        <td valign="top">&nbsp;</td>
      </tr>
      <tr>
        <td valign="top">We have used <span class="codeInline">DataConnection</span> Namespace in the above   code and in all subsequent Database example(s). Using this class we establish   connection to the MS Access database with ADO.NET component. You can always change your connection to any other database server. Let's go through   the lines of code inside this class: </td>
      </tr>
      <tr>
        <td valign="top">&nbsp;</td>
      </tr>
      <tr>
        <td valign="top" class="codeBlock"><p>using System;<br />
          using System.Data;<br />
          using System.Data.Odbc;<br />
          using System.Web;<br />
          using System.Configuration;</p>
            <p>namespace DataConnection<br />
              {<br />
             &nbsp;<span class="codeComment">&nbsp;&nbsp; /// &lt;summary&gt;<br />
&nbsp;&nbsp;&nbsp; /// Summary description for DbHelper.<br />
&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />
&nbsp;</span>&nbsp;&nbsp; public class DbConn<br />
              &nbsp;&nbsp;&nbsp; {</p>
            <p> &nbsp;<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //  Create a database Connection. using here Access Database<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //  Return type object of OdbcConnection</span></p>
            <p> <span class="codeComment">&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public OdbcConnection connection;<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public OdbcDataReader ReadData;<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public OdbcCommand aCommand;<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public OdbcDataAdapter DataAdapter;<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public DataSet DataSet;</p>
            <p> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public DbConn()<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
            <p> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; string connectionName = &quot;MSAccessConnection&quot;;<br />
            <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // connectionName = &quot;sqlServerConnection&quot;;</span></p>
            <p> <span class="codeComment">&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; string ConnectionString = ConfigurationManager.ConnectionStrings[connectionName].ConnectionString;<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; connection = new OdbcConnection();<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; connection.ConnectionString = ConnectionString;<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; connection.Open();<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; catch (Exception e)<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; HttpContext.Current.Response.Write(e.Message.ToString());<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; DataSet = new DataSet();</p>
            <p> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
            <p> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public DbConn(string strQuery)<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</p>
            <p> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; string connectionName = &quot;MSAccessConnection&quot;;<br />
              <span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // connectionName = &quot;sqlServerConnection&quot;;<br />
              <br />
            </span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; string ConnectionString = ConfigurationManager.ConnectionStrings[connectionName].ConnectionString;<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; try<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; connection = new OdbcConnection();<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; connection.ConnectionString = ConnectionString;<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; connection.Open();<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; GetReader(strQuery);<br />
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; catch (Exception e)<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; HttpContext.Current.Response.Write(e.Message.ToString());<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />
            </p>
            <p>&nbsp;<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Create an instance dataReader<br />
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Return type object of OdbcDataReader<br />
&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public void GetReader(string strQuery)<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br />
              &nbsp;<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //  Create a Command object<br />
&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aCommand = new OdbcCommand(strQuery, connection);<br />
              &nbsp;<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Create data reader object using strQuery string</span></p>
            <p> <span class="codeComment">&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ReadData = aCommand.ExecuteReader(CommandBehavior.CloseConnection);<br />
            </p>
            <p> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</p>
            <p> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; public void GetDataSet(string strQuery, string TableName)<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br />
              &nbsp;<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //  Create a Command object<br />
&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; aCommand = new OdbcCommand(strQuery, connection);<br />
              &nbsp;<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Create Data Adapter<br />
&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; DataAdapter = new OdbcDataAdapter(aCommand);<br />
              &nbsp;<span class="codeComment">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Fill dataset with record</span></p>
            <p> <span class="codeComment">&nbsp;</span>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; DataAdapter.Fill(DataSet, TableName);<br />
              &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp; <br />
              &nbsp;&nbsp;&nbsp; }<br />
            }</p></td>
      </tr>
      <tr>
        <td valign="top">&nbsp;</td>
      </tr>
      <tr>
        <td valign="top">What it does:<br />
            <ul>
              <li>Set up Connection as per the connection string defined in <span class="codeInline">web.config</span> file.<br />
                  <br />
                  <span class="codeInline">&lt;connectionStrings&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;add   name=&quot;MSAccessConnection&quot; providerName=&quot;System.Data.Odbc&quot;   connectionString=&quot;Driver={Microsoft Access Driver (*.mdb)};Dbq=|DataDirectory|\FactoryDB.mdb&quot;/&gt;<br />
&lt;/connectionStrings&gt;<br />
                  </span><br />
                <br />
                To   change your connection to any other database server, you only need to setup   <span class="codeInline">web.config</span> file. <br />
                <br />
                <br />
              </li>
              <li>The class <span class="codeInline">DBConn</span> accepts SQL Query, executes it and returns the result as ASP.NET <span class="codeInline">DataReader</span> object -<span class="codeInline">ReadData</span>. </li>
            </ul></td>
      </tr>
      <tr>
        <td valign="top">&nbsp;</td>
      </tr>
      <tr>
        <td valign="top">Example:</td>
      </tr>
      <tr>
        <td valign="top" class="codeBlock"><p><strong>using DataConnection</strong></p>
            <p>...</p>
          <p>&nbsp;&nbsp; <span class="codeComment">//store the sql query</span><br />
            &nbsp;&nbsp; string strQuery = &quot;select colName1, colName2 from   yourTable&quot;;<br />
            <span class="codeComment">&nbsp;&nbsp; //Create datareader   object<br />
            </span>&nbsp;&nbsp;<strong> DbConn Rs = new DbConn(strQuery)</strong>;</p>
          <p><span class="codeComment">&nbsp;&nbsp; //Create a sample accumulator<br />
              </span> <span class="codeInline">&nbsp;&nbsp; int accumulator= 0;<br />
              <br />
              </span><span class="codeComment">&nbsp;&nbsp; //Check if we've records to show<br />
              </span>&nbsp;&nbsp; if(<strong>Rs.ReadData.HasRows)</strong><br />
              &nbsp;&nbsp; {<br />
              <span class="codeComment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Iterate through table<br />
              </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while(<strong>Rs1.ReadData.Read()</strong>)<br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />
              <span class="codeComment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //do something using the columns <br />
              </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sumdata +=   Convert.ToInt32(<strong>Rs.ReadData[&quot;colName1&quot;]</strong>)+Convert.ToInt32(<strong>Rs.ReadData[&quot;colName2&quot;]</strong>);<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <br />
            &nbsp;&nbsp; }<br />
            <br />
            <span class="codeComment">&nbsp;&nbsp; ' Close the reader <br />
              </span>&nbsp;&nbsp; <strong>Rs.ReadData.Close()</strong>;<br />
          </p></td>
      </tr>
    </table>    </td>
  </tr>
</table>
</body>
</html>
